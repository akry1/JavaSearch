ActionListener is an interface that could be implemented in order to determine how certain event should be handled. When implementing an interface, all methods in that interface should be implemented, ActionListener interface has one method to implement named actionPerformed().<br />The code listing 9.6 shows how to implement ActionListener:<br /><br /><br /><br />Code listing 9.6: EventApplet.java<br /><br /><br /> 1 import java.applet.Applet;<br /> 2 import java.awt.Button;<br /> 3 import java.awt.Container;<br /> 4 import java.awt.Dialog;<br /> 5 import java.awt.FlowLayout;<br /> 6 import java.awt.Frame;<br /> 7 import java.awt.Label;<br /> 8 import java.awt.event.ActionEvent;<br /> 9 import java.awt.event.ActionListener;<br />10 <br />11 public class EventApplet extends Applet {<br />12 <br />13     /**<br />14      * Init.<br />15      */<br />16     public void init() {<br />17         Button clickMeButton = new Button("Click me");<br />18 <br />19         final Applet eventApplet = this;<br />20 <br />21         ActionListener specificClassToPerformButtonAction = new ActionListener() {<br />22 <br />23             public void actionPerformed(ActionEvent event) {<br />24                 Dialog dialog = new Dialog(getParentFrame(eventApplet), false);<br />25                 dialog.setLayout(new FlowLayout());<br />26                 dialog.add(new Label("Hi!!!"));<br />27                 dialog.pack();<br />28                 dialog.setLocation(100, 100);<br />29                 dialog.setVisible(true);<br />30             }<br />31 <br />32             private Frame getParentFrame(Container container) {<br />33                 if (container == null) {<br />34                     return null;<br />35                 } else if (container instanceof Frame) {<br />36                     return (Frame) container;<br />37                 } else {<br />38                     return getParentFrame(container.getParent());<br />39                 }<br />40                <br />41             }<br />42         };<br />43         clickMeButton.addActionListener(specificClassToPerformButtonAction);<br />44 <br />45         add(clickMeButton);<br />46     }<br />47 }<br /><br /><br /><br /><br />When you compile and run the above code, the message "Hi!!!" will appear when you click on the button.