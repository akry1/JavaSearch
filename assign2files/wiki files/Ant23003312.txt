For comprehensive information about all aspects of Ant, please see the Ant Wikibook.<br /><br />The best way to build your application is to use a build tool. This checks all the needed dependencies and compiles only the needed class for the build. Ant tool is one of the best and the most popular build tools currently available. Ant is a build management tool designed to replace MAKE as the tool for automated builds of large Java applications. Like Java, and unlike MAKE, Ant is designed to be platform independent.<br />Using Ant you would build your application from the command line by typing:<br /><br /><br /><br />Ant building<br /><br />ant build.xml<br /><br /><br /><br />The build.xml file contains all the information needed to build the application.<br />Building a Java application requires certain tasks to be performed defined in a build.xml file. Those tasks may include not only compiling the code, but also copying code, packaging the program to a Jar, creating EJBs, running automated tests, doing ftp for the code to remote site, and so on. For some tasks a condition can be assigned, for example to compile only changed code, or do the task if that was not already done so. Tasks dependency can also be specified, which will make sure that the order of executions of the tasks are in the right order. For example, when compiling the code before packaging it to a jar, the package-to-jar task depends on the compilation task.<br /><br /><br /><br />In rare cases, your code may appear to compile correctly but the program behaves as if you were using an old copy of the source code (or otherwise reports errors during runtime.) When this occurs, you may need to clean your compilation folder by either deleting the class files or using the Clean command from an IDE.<br /><br /><br />The build.xml file is generally kept in the root directory of the java project. Ant parses this file and executes the tasks therein. Below we give an example build.xml file.<br />Ant tool is written in Java and is open source, so it can be extended if there is a task you'd like to be done during the build that is not in the predefined tasks list. It is very easy to hook your ant task code to the other tasks: your code only needs to be in the classpath, and the Ant tool will load it at runtime. For more information about writing your own Ant tasks, please see the project website at http://ant.apache.org/.<br /><br />Example build.xml file.<br /><br /><br /><br /><?xml version="1.0"?><br /><br /><project name="ExampleApp" basedir="." default="main"><br /><br />    <property name="source.dir"    value="source" /><br />    <property name="libraries.dir" value="libraries" /><br />    <property name="build.dir"     value="build" /><br />    <property name="classes.dir"   value="${build.dir}/classes" /><br />    <property name="dist.dir"      value="${build.dir}/dist" /><br />    <property name="main-class"    value="com.example.ExampleApp"/><br /><br />    <path id="classpath"><br />        <fileset dir="${libraries.dir}" includes="**/*.jar"/><br />    </path><br /><br />    <target name="clean"><br />        <delete dir="${build.dir}"/><br />    </target><br /><br />    <target name="compile"><br />        <mkdir dir="${classes.dir}"/><br />        <javac srcdir="${source.dir}" destdir="${classes.dir}" classpathref="classpath" /><br />        <copy todir="${classes.dir}"><br />            <fileset dir="${src.dir}" excludes="**/*.java" /><br />        </copy><br />    </target><br /><br />    <target name="build" depends="compile"><br />        <mkdir dir="${dist.dir}"/><br />        <copy todir="${dist.dir}/lib" flatten="true"><br />            <path refid="classpath" /><br />        </copy><br />        <path id="dist.classpath"><br />            <fileset dir="${dist.dir}/lib" includes="*.jar" /><br />        </path><br />        <manifestclasspath property="dist.manifest.classpath" jarfile="${dist.dir}/${ant.project.name}.jar"><br />            <classpath refid="dist.classpath" /><br />        </manifestclasspath><br />        <jar destfile="${dist.dir}/${ant.project.name}.jar" ><br />            <zipfileset dir="${classes.dir}" /><br />            <manifest><br />                <attribute name="Class-Path" value="${dist.manifest.classpath}"/><br />                <attribute name="Main-Class" value="${main-class}" /><br />            </manifest><br />        </jar><br />    </target><br /><br />    <target name="run-build" depends="build"><br />        <java jar="${dist.dir}/${ant.project.name}.jar" fork="true"><br />            <classpath><br />                <path refid="classpath"/><br />                <path location="${dist.dir}/${ant.project.name}.jar"/><br />            </classpath><br />        </java><br />    </target><br /><br />    <target name="run" depends="compile"><br />        <java classname="${main-class}" ><br />            <classpath><br />                <path refid="classpath"/><br />                <pathelement location="${classes.dir}" /><br />            </classpath><br />        </java><br />    </target><br /><br />    <target name="clean-build" depends="clean, build"/><br /><br />    <target name="main" depends="clean, run"/><br /><br /></project><br /><br /><br /><br />The next most popular way to build applications is using an Integrated Development Environment (IDE).