The BigInteger class represents integers of almost any size. As with other objects, they need to be constructed. Unlike regular numbers, the BigInteger represents an immutable object - methods in use by the BigInteger class will return a new copy of a BigInteger.<br />To instantiate a BigInteger, you can create it from either byte array, or from a string. For example:<br /><br /><br /><br />Code section 3.23: 1 quintillion, or 10^18. Too large to fit in a long.<br /><br /><br />1 BigInteger i = new BigInteger("1000000000000000000");<br /><br /><br /><br /><br />BigInteger cannot use the normal Java operators. They use the methods provided by the class.<br /><br /><br /><br />Code section 3.24: Multiplications and an addition.<br /><br /><br />1 BigInteger a = new BigInteger("3");<br />2 BigInteger b = new BigInteger("4");<br />3 <br />4 // c = a^2 + b^2<br />5 BigInteger c = a.multiply(a).add(b.multiply(b));<br /><br /><br /><br /><br />It is possible to convert to a long, but the long may not be large enough.<br /><br /><br /><br />Code section 3.25: Conversion.<br /><br /><br />1 BigInteger aBigInteger = new BigInteger("3");<br />2 long aLong = aBigInteger.longValue();