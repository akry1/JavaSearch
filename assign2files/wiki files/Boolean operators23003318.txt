The Java boolean operators are based on the operations of the boolean algebra. The boolean operators operate directly on boolean values.<br />Here is a list of four common boolean operators in Java:<br /><br />! : Boolean NOT<br />&& : Boolean AND<br />|| : Boolean inclusive OR<br />^ : Boolean exclusive XOR<br /><br />The boolean NOT operator ("!") inverts the value of a boolean expression. The boolean AND operator ("&&") will result in true if and only if the values on both sides of the operator are true. The boolean inclusive OR operator ("||") will result in true if either or both of the values on the sides of the operator is true. The boolean exclusive XOR operator ("^") will result in true if one and only of the values on the sides of the operator is true.<br />To show how these operators are used, here is an example:<br /><br /><br /><br /><br /><br /><br />Code section 3.38: Operands.<br /><br /><br /> 1 boolean iMTrue = true;<br /> 2 boolean iMTrueToo = true;<br /> 3 boolean iMFalse = false;<br /> 4 boolean iMFalseToo = false;<br /> 5 <br /> 6 System.out.println("NOT operand:");<br /> 7 System.out.println(!iMTrue);<br /> 8 System.out.println(!iMFalse);<br /> 9 System.out.println(!(4 < 5));<br />10 System.out.println("AND operand:");<br />11 System.out.println(iMTrue && iMTrueToo);<br />12 System.out.println(iMFalse && iMFalseToo);<br />13 System.out.println(iMTrue && iMFalse);<br />14 System.out.println(iMTrue && !iMFalse);<br />15 System.out.println("OR operand:");<br />16 System.out.println(iMTrue || iMTrueToo);<br />17 System.out.println(iMFalse || iMFalseToo);<br />18 System.out.println(iMTrue || iMFalse);<br />19 System.out.println(iMFalse || !iMTrue);<br />20 System.out.println("XOR operand:");<br />21 System.out.println(iMTrue ^ iMTrueToo);<br />22 System.out.println(iMFalse ^ iMFalseToo);<br />23 System.out.println(iMTrue ^ iMFalse);<br />24 System.out.println(iMFalse ^ !iMTrue);<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for code section 3.38<br /><br />NOT operand:<br />false<br />true<br />false<br />AND operand:<br />true<br />false<br />false<br />true<br />OR operand:<br />true<br />false<br />true<br />false<br />XOR operand:<br />false<br />false<br />true<br />false<br /><br /><br /><br /><br /><br /><br />Here are the truth tables for the boolean operators:<br /><br /><br />a<br />!a<br /><br /><br />true<br />false<br /><br /><br />false<br />true<br /><br /><br /><br /><br />a<br />b<br />a && b<br />a || b<br />a ^ b<br /><br /><br />true<br />true<br />true<br />true<br />false<br /><br /><br />true<br />false<br />false<br />true<br />true<br /><br /><br />false<br />true<br />false<br />true<br />true<br /><br /><br />false<br />false<br />false<br />false<br />false<br /><br /><br /><br />For help on simplifying complex logic, see De Morgan's laws.<br /><br />In Java, boolean logic has a useful property called short circuiting. This means that expressions will only be evaluated as far as necessary. In the expression (a && b), if a is false, then b will not be evaluated because the expression will be false no matter what. Here is an example that shows that the second expression is not automatically checked:<br /><br /><br /><br /><br /><br /><br />Code section 3.39: Short circuiting.<br /><br /><br />1 System.out.println((4 < 5) || ((10 / 0) == 2));<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for code section 3.39<br /><br />true<br /><br /><br /><br /><br /><br /><br />To disable this property, you can use & instead of && and | instead of || but it's not recommended.<br /><br />For the bitwise operations on & and |, see Arithmetic expressions.<br /><br /><br /><br /><br /> Loop blocks<br />Java Programming<br />Boolean expressions<br />Variables