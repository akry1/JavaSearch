JNIEXPORT void JNICALL Java_ClassName_MethodName<br />   (JNIEnv *env, jobject obj, jstring javaString)<br /> {<br />     /*Get the native string from javaString*/<br />     const char *nativeString = (*env)->GetStringUTFChars(env, javaString, 0);<br /><br />     /*Do something with the nativeString*/<br /><br />     /*DON'T FORGET THIS LINE!!!*/<br />     (*env)->ReleaseStringUTFChars(env, javaString, nativeString);<br /> }<br /><br />Note that C++ JNI code is syntactically slightly cleaner than C JNI code because like Java, C++ uses object method invocation semantics. That means that in C, the env parameter is dereferenced using (*env)-> and env has to be explicitly passed to JNIEnv methods. In C++, the env parameter is dereferenced using env-> and the env parameter is implicitly passed as part of the object method invocation semantics.