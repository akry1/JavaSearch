Sometimes we may want to change the ordering of a collection of objects from the same class. We may want to order descending or ascending order. We may want to sort by name or by address.<br />We need to create a class for each way of ordering. It has to implement the Comparator interface.<br />Since Java 5.0, the Comparator interface is generic; that means when you implement it, you can specify what type of objects your comparator can compare.<br /><br /><br /><br />Code listing 5.7: CustomerComparator.java<br /><br /><br />1 public class CustomerComparator implements Comparator<Customer> {<br />2     public int compare(Customer cust1, Customer cust2) {<br />3         return cust1.getName().compareTo(cust2.getName());<br />4     }<br />5 }<br /><br /><br /><br /><br />The above class then can be associated with a SortedSet or other collections that support sorting.<br /><br /><br /><br />Code section 5.21: Comparator usage.<br /><br /><br />1 Collection<Customer> orderedCustomers = new TreeSet<Customer>(new CustomerComparator());<br /><br /><br /><br /><br />Using the Iterator the orderedCustomers collection can be iterated in order of sorted by name.<br />A List can be sorted by the Collections' sort method.<br /><br /><br /><br />Code section 5.22: Customized comparison.<br /><br /><br />1 java.util.Collections.sort(custList, new CustomerComparator());<br /><br /><br /><br /><br />Sorts the specified list according to the order induced by the specified comparator. All elements in the list must be mutually comparable using the specified comparator.<br />An array of objects can also be sorted with the help of a Comparator.<br /><br /><br /><br />Code section 5.23: Array sorting.<br /><br /><br />1 SortableCustomer[] customerArray;<br />2 //...<br />3 java.util.Arrays.sort(customerArray, new CustomerComparator());<br /><br /><br /><br /><br /><br />Sorts the specified array of Customer objects (customerArray) according to the order induced by the specified comparator. All elements in the array must be mutually comparable by the specified comparator.<br /><br /><br /><br /><br /><br /><br /><br /><br />To do:<br />Add some exercises like the ones in Variables<br /><br /><br /><br /><br /><br /><br /> Map<br />Java Programming<br />Comparing Objects<br />Exceptions