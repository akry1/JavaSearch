One of the main concerns of a developer writing hot re-deployable applications is to understand how class loading works. Within the internals of the class loading mechanism lies the answer to questions like:<br /><br />What happens if I pack a newer version of an utility library with my application, while an older version of the same library lingers somewhere in the server's lib directory?<br />How can I use two different versions of the same utility library, simultaneously, within the same instance of the application server?<br />What version of an utility class I am currently using?<br />Why do I need to mess with all this class loading stuff anyway?<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />To do:<br />Add some exercises like the ones in Variables<br /><br /><br /><br /><br /><br /><br /> Overloading Methods and Constructors<br />Java Programming<br />Object Lifecycle<br />Nested Classes