Since Java 1.5, the class java.lang.Class is generic. It is an interesting example of using generics for something other than a container class. For example, the type of String.class is Class<String>, and the type of Serializable.class is Class<Serializable>. This can be used to improve the type safety of your reflection code. In particular, since the newInstance() method in Class now returns T, you can get more precise types when creating objects reflectively. Now we can use the newInstance() method to return a new object with exact type, without casting. An example with generics:<br /><br /><br /><br />Code section 4.48: Automatic cast.<br /><br /><br /> 1 Customer cust = Utility.createAnyObject(Customer.class);  // No casting<br /> 2 ...<br /> 3 public static <T> T createAnyObject(Class<T> cls) {<br /> 4     T ret = null;<br /> 5     try {<br /> 6         ret = cls.newInstance();<br /> 7     } catch (Exception e) {<br /> 8         // Exception Handling<br /> 9     }<br />10     return ret;<br />11 }<br /><br /><br /><br /><br />The same code without generics:<br /><br /><br /><br />Code section 4.49: Former version.<br /><br /><br /> 1 Customer cust = (Customer) Utility.createAnyObject(Customer.class);  // Casting is needed<br /> 2 ...<br /> 3 public static Object createAnyObject(Class cls) {<br /> 4     Object ret = null;<br /> 5     try {<br /> 6         ret = cls.newInstance();<br /> 7     } catch (Exception e) {<br /> 8         // Exception Handling<br /> 9     }<br />10     return ret;<br />11 }