To be able to compare two Java objects of the same class the boolean equals(Object obj) method must be overriden and implemented by the class.<br />The implementor decides which values must be equal to consider two objects to be equal. For example in the below class, the name and the address must be equal but not the description.<br /><br /><br /><br />Code listing 5.5: Customer.java<br /><br /><br /> 1 public class Customer {<br /> 2     private String name;<br /> 3     private String address;<br /> 4     private String description;<br /> 5     // ...<br /> 6     public boolean equals(Object obj) {<br /> 7         if (this == obj) {<br /> 8             return true;<br /> 9         } else if (obj == null) {<br />10             return false;<br />11         } else if (obj instanceof Customer) {<br />12             Customer cust = (Customer) obj;<br />13             if ((cust.getName() == null && name == null) ||<br />14                 (cust.getName().equals(name) && ((cust.getAddress() == null && address == null)<br />15                 || cust.getAddress().equals(address))) {<br />16                 return true;<br />17             }<br />18         }<br />19         return false;<br />20     }<br />21 <br />22 }<br /><br /><br /><br /><br />After the equals() method is overriden, two objects from the same class can be compared like this:<br /><br /><br /><br />Code section 5.20: Method usage.<br /><br /><br />1 Customer cust1 = new Customer();<br />2 Customer cust2 = new Customer();<br />3 //...<br />4 if (cust1.equals(cust2)) {<br />5     // Two Customers are equal, by name and address<br />6 }<br /><br /><br /><br /><br />Note that equal objects must have equal hash codes. Therefore, when overriding the equals method, you must also override the hashCode method. Failure to do so violates the general contract for the hashCode method, and any classes that use the hash code, such as HashMap will not function properly.