The Java language provides special support for the string concatenation with operator +:<br /><br /><br /><br /><br /><br /><br />Code section 3.84: Examples of concatenation.<br /><br /><br />1 System.out.println("First part");<br />2 System.out.println(" second part");<br />3 String str = "First part" + " second part";<br />4 System.out.println(str);<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.84<br /><br />First part<br /> second part<br />First part second part<br /><br /><br /><br /><br /><br /><br />The concatenation is not always processed at the same time. Raw string literals concatenation is done at compile time, hence there is a single string literal in the byte code of the class. Concatenation with at least one object is done at runtime.<br />+ operator can concatenate other objects with strings. For instance, integers will be converted to strings before the concatenation:<br /><br /><br /><br /><br /><br /><br />Code section 3.85: Concatenation of integers.<br /><br /><br />1 System.out.println("Age=" + 25);<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.85<br /><br />Age=25<br /><br /><br /><br /><br /><br /><br />Each Java object has the String toString() inherited from the Object class. This method provides a way to convert objects into Strings. Most classes override the default behavior to provide more specific (and more useful) data in the returned String:<br /><br /><br /><br /><br /><br /><br />Code section 3.86: Concatenation of objects.<br /><br /><br />1 System.out.println("Age=" + new Integer(31));<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.86<br /><br />Age=31