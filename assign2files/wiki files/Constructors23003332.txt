A constructor is called to initialize an object immediately after the object has been allocated:<br /><br /><br /><br />Code listing 4.3: Cheese.java<br /><br /><br />1 public class Cheese {<br />2   // This is a constructor<br />3   public Cheese() {<br />4     System.out.println("Construct an instance");<br />5   }<br />6 }<br /><br /><br /><br /><br />Typically, a constructor is invoked using the new keyword:<br /><br /><br /><br />Code section 4.1: A constructor call.<br /><br /><br />1 Cheese cheese = new Cheese();<br /><br /><br /><br /><br />The constructor syntax is close to the method syntax. However, the constructor has the same name as the name of the class (with the same case) and the constructor has no return type. The second point is the most important difference as a method can also have the same name as the class, which is not recommended:<br /><br /><br /><br />Code listing 4.4: Cheese.java<br /><br /><br />1 public class Cheese {<br />2   // This is a method with the same name as the class<br />3   public void Cheese() {<br />4     System.out.println("A method execution.");<br />5   }<br />6 }<br /><br /><br /><br /><br />The returned object is always a valid, meaningful object, as opposed to relying on a separate initialization method. A constructor cannot be abstract, final, native, static, strictfp nor synchronized. However, a constructor, like methods, can be overloaded and take parameters.<br /><br /><br /><br />Code listing 4.5: Cheese.java<br /><br /><br /> 1 public class Cheese {<br /> 2      // This is a constructor<br /> 3      public Cheese() {<br /> 4           doStuff();<br /> 5      }<br /> 6 <br /> 7      // This is another constructor<br /> 8      public Cheese(int weight) {<br /> 9           doStuff();<br />10      }<br />11 <br />12      // This is yet another constructor<br />13      public Cheese(String type, int weight) {<br />14           doStuff();<br />15      }<br />16 }<br /><br /><br /><br /><br />By convention, a constructor that accepts an object of its own type as a parameter and copies the data members is called a copy constructor. One interesting feature of constructors is that if and only if you do not specify a constructor in your class, the compiler will create one for you. This default constructor, if written out would look like:<br /><br /><br /><br />Code listing 4.6: Cheese.java<br /><br /><br />1 public class Cheese {<br />2      public Cheese() {<br />3            super();<br />4      }<br />5 }<br /><br /><br /><br /><br />The super() command calls the constructor of the superclass. If there is no explicit call to super(...) or this(...), then the default superclass constructor super(); is called before the body of the constructor is executed. That said, there are instances where you need to add in the call manually. For example, if you write even one constructor, no matter what parameters it takes, the compiler will not add a default constructor. The code listing 4.8 results in a runtime error:<br /><br /><br /><br />Code listing 4.7: Cheese.java<br /><br /><br />1 public class Cheese {<br />2      public Cheese(int weight, String type) {<br />3           doStuff();<br />4      }<br />5 }<br /><br /><br /><br /><br /><br /><br /><br />Code listing 4.8: Mouse.java<br /><br /><br />1 public class Mouse {<br />2      public void eatCheese() {<br />3              Cheese c = new Cheese(); // Oops, compile time error!<br />4      }<br />5 }<br /><br /><br /><br /><br />This is something to keep in mind when extending existing classes. Either make a default constructor, or make sure every class that inherits your class uses the correct constructor.