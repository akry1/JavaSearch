A client code for a server/service is usually an API that a user application uses to interface to the server. With the help of a client API the user application does not have to know how to connect to the server to get services.<br /><br />ComClient <br />This class is the client API. The application is using this class to communicate with the server.<br /><br />The following is the client class for the above server:<br /><br /><br /><br />Code listing 1.5: ComClient<br /><br /><br /> public class ComClient<br /> {<br />  private Socket         comSocket;<br />  private ObjectOutputStream oOut;<br />  private ObjectInputStream  oIn;<br />  private boolean         IsItOpen = false;       <br />    /**<br />     * --- Open Socket ---<br />     */<br />    public void openCom( String sServerName,<br />                         int    iPortNumber ) throws UnknownHostException,<br />                                                              IOException  <br />    {<br />       try {<br />          // --- Open Socket for communication ---<br />          comSocket = new Socket( sServerName, iPortNumber );     <br />          // --- Get Stream to write request to the Server ---<br />          oOut = new ObjectOutputStream( comSocket.getOutputStream() );     <br />          // --- Get Stream// to read from the Server<br />          oIn = new ObjectInputStream( comSocket.getInputStream());<br />          // --- Set internal Member variable that the Communication opened ---<br />          IsItOpen = true;<br />       } catch ( java.net.UnknownHostException e ) {<br />          System.err.println( "(openCom:)Don't know about host: "+sServerName );<br />          IsItOpen = false;<br />          throw( e );                                         <br />       } catch ( java.io.IOException e ) {<br />          System.err.println("(openCom:)Couldn't get I/O for the connection to: "+ sServerName );<br />          IsItOpen = false;<br />          throw( e );         <br />       }               <br />    }<br />    /**<br />     * --- Check if Socket is open ---<br />     */<br />    public boolean isItOpen()<br />    {<br />      return IsItOpen;<br />    }     <br />    /**<br />     * --- Get data string from the Server ---<br />     */<br />    public void getServerData( COM_DATA tServData ) throws IOException<br />    {<br />        // --- Initialize Variables ---<br />        tServData.comData = "";<br />        // --- Get the Response from the Server ---              <br />        try {<br />           tServData.copy( (COM_DATA) oIn.readObject() );<br />        }   <br />        catch ( ClassNotFoundException e ) {<br />            System.out.println( "Class Not Found" );<br />        } <br />        System.out.println( "Server: " + tServData.comData );<br />        if ( tServData.comData.equals("BYE.") )<br />        {<br />            tServData.bExit = true;<br />        }        <br />     return;<br />    }<br />    /**<br />     * --- Send data to the Server ---<br />     */<br />    public void sendDataToServer( COM_DATA tServData ) throws IOException<br />    {<br />        // --- Send the data string ---<br />        System.out.println( "Send: " + tServData.comData );<br />        oOut.writeObject( tServData );<br />     return;<br />    } <br />    /**<br />     * --- Close Socket --- <br />     */<br />    public void closeCom() throws IOException<br />    {<br />        oOut.close();<br />        oIn.close();<br />        comSocket.close();<br />        IsItOpen = false;<br />    }    <br /> }<br /><br /><br /><br /><br /><br />getServerData( COM_DATA tServData ) <br />This method reads the data from the server and copies the values to tServData object.<br />sendDataToServer( COM_DATA tServData ) <br />This method sends the tServData object through the network to the server.<br />oIn.readObject() <br />This method returns the data object sent by the server.<br />oOut.writeObject( tServData ) <br />This method sends the data object to the server.<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />To do:<br />Add some exercises like the ones in Variables<br /><br /><br /><br /><br /><br /><br /> Basic Synchronization<br />Java Programming<br />Client Server<br />Remote Method Invocation