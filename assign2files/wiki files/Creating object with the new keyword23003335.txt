99% of new objects are created using the new keyword.<br /><br /><br /><br />Code listing 4.13: MyProgram.java<br /><br /><br />1 public class MyProgram {<br />2 <br />3   public static void main(String[] args) {<br />4     // Create an 'MyObject' for the first time the application started<br />5     MyObject obj = new MyObject();<br />6   }<br />7 }<br /><br /><br /><br /><br />When an object from the MyObject class is created for the first time, the JVM searches the file system for the definition of the class, that is the Java byte code. The file has the extension of *.class. The CLASSPATH environment variable contains locations where Java classes are stored. The JVM is looking for the MyObject.class file. Depending on which package the class belongs to, the package name will be translated to a directory path.<br />When the MyObject.class file is found, the JVM's class loader loads the class in memory, and creates a java.lang.Class object. The JVM stores the code in memory, allocates memory for the static variables, and executes any static initialize block. Memory is not allocated for the object member variables at this point, memory will be allocated for them when an instance of the class, an object, is created.<br />There is no limit on how many objects from the same class can be created. Code and static variables are stored only once, no matter how many objects are created. Memory is allocated for the object member variables when the object is created. Thus, the size of an object is determined not by its code's size but by the memory it needs for its member variables to be stored.