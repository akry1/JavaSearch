Once we have a Runnable process block, we can create various threads that can then execute the logic encased within such blocks. Multithreading capabilities in Java are utilized and manipulated using the Thread class. A Thread object therefore holds all the necessary logic and devices to create truly multithreaded programs. Consider the following program:<br /><br /><br /><br />Code listing 2: Creating Thread objects<br /><br /><br />public class ThreadLogic {<br />    public static void main(String[] args) {<br />        Thread t1 = new Thread(new RunnableProcess("Thread-1"));<br />        Thread t2 = new Thread(new RunnableProcess("Thread-2"));<br />        Thread t3 = new Thread(new RunnableProcess("Thread-3"));<br />    }<br />}<br /><br /><br /><br /><br />Creating threads is as simple as the above program suggests. You just have to create an object of the Thread class and pass a reference to a Runnable process object. In the case above, we present the Thread constructor with the class object for the RunnableProcess class that we created in code listing 1. But for each object, we give a different name (i.e., "Thread-1" and "Thread-2", etc.) to differentiate between the three Thread objects. The above example only declares Thread objects and hasn't yet started them for execution.