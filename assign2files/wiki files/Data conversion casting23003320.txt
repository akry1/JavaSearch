Data conversion (casting) can happen between two primitive types. There are two kinds of casting:<br /><br />Implicit: casting operation is not required; the magnitude of the numeric value is always preserved. However, precision may be lost when converting from integer to floating point types<br />Explicit: casting operation required; the magnitude of the numeric value may not be preserved<br /><br /><br /><br /><br />Code section 3.58: Implicit casting (int is converted to long, casting is not needed).<br /><br /><br />1 int  i = 65;<br />2 long l = i;<br /><br /><br /><br /><br /><br /><br /><br /><br />Code section 3.59: Explicit casting (long is converted to int, casting is needed).<br /><br /><br />1 long l = 656666L;<br />2 int  i = (int) l;<br /><br /><br /><br /><br /><br />The following table shows the conversions between primitive types, it shows the casting operation for explicit conversions:<br /><br /><br /><br />from byte<br />from char<br />from short<br />from int<br />from long<br />from float<br />from double<br />from boolean<br /><br /><br />to byte<br />-<br />(byte)<br />(byte)<br />(byte)<br />(byte)<br />(byte)<br />(byte)<br />N/A<br /><br /><br />to char<br /><br />-<br />(char)<br />(char)<br />(char)<br />(char)<br />(char)<br />N/A<br /><br /><br />to short<br /><br />(short)<br />-<br />(short)<br />(short)<br />(short)<br />(short)<br />N/A<br /><br /><br />to int<br /><br /><br /><br />-<br />(int)<br />(int)<br />(int)<br />N/A<br /><br /><br />to long<br /><br /><br /><br /><br />-<br />(long)<br />(long)<br />N/A<br /><br /><br />to float<br /><br /><br /><br /><br /><br />-<br />(float)<br />N/A<br /><br /><br />to double<br /><br /><br /><br /><br /><br /><br />-<br />N/A<br /><br /><br />to boolean<br />N/A<br />N/A<br />N/A<br />N/A<br />N/A<br />N/A<br />N/A<br />-<br /><br /><br />Unlike C, C++ and similar languages, Java can't represent false as 0 or null and can't represent true as non-zero. Java can't cast from boolean to a non-boolean primitive data type, or vice versa.<br /><br />For non primitive types:<br /><br /><br /><br />to Integer<br />to Float<br />to Double<br />to String<br />to Array<br /><br /><br />Integer<br />-<br />(float)x<br />(double)x<br />x.doubleValue()<br />x.toString()<br />Float.toString(x)<br />new int[] {x}<br /><br /><br />Float<br />java.text.DecimalFormat("#").format(x)<br />-<br />(double)x<br />x.toString()<br />new float[] {x}<br /><br /><br />Double<br />java.text.DecimalFormat("#").format(x)<br />java.text.DecimalFormat("#").format(x)<br />-<br />x.toString()<br />new double[] {x}<br /><br /><br />String<br />Integer.parseInt(x)<br />Float.parseFloat(x)<br />Double.parseDouble(x)<br />-<br />new String[] {x}<br /><br /><br />Array<br />x[0]<br />x[0]<br />x[0]<br />Arrays.toString(x)<br />-