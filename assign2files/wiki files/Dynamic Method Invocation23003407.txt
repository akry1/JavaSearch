We start with basic transfer object:<br /><br /><br /><br />Code listing 10.1: DummyTo.java<br /><br /><br /> 1 package com.test;<br /> 2  <br /> 3 public class DummyTo {<br /> 4     private String name;<br /> 5     private String address;<br /> 6  <br /> 7     public String getName() {<br /> 8         return name;<br /> 9     }<br />10  <br />11     public void setName(String name) {<br />12         this.name = name;<br />13     }<br />14  <br />15     public String getAddress() {<br />16         return address;<br />17     }<br />18  <br />19     public void setAddress(String address) {<br />20         this.address = address;<br />21     }<br />22  <br />23     public DummyTo(String name, String address) {<br />24         this.name = name;<br />25         this.address = address;<br />26     }<br />27  <br />28     public DummyTo() {<br />29         this.name = new String();<br />30         this.address = new String();<br />31     }<br />32  <br />33     public String toString(String appendBefore) {<br />34         return appendBefore + " " + name + ", " + address;<br />35     }<br />36 }<br /><br /><br /><br /><br />Following is the example for invoking method from the above mentioned to dynamically. Code is self explanatory.<br /><br /><br /><br /><br /><br /><br />Code listing 10.2: ReflectTest.java<br /><br /><br /> 1 package com.test;<br /> 2  <br /> 3 import java.lang.reflect.Constructor;<br /> 4 import java.lang.reflect.InvocationTargetException;<br /> 5 import java.lang.reflect.Method;<br /> 6  <br /> 7 public class ReflectTest {<br /> 8     public static void main(String[] args) {<br /> 9         try {<br />10             Class<?> dummyClass = Class.forName("com.test.DummyTo");<br />11  <br />12             // parameter types for methods<br />13             Class<?>[] partypes = new Class[]{String.class};<br />14  <br />15             // Create method object. methodname and parameter types<br />16             Method meth = dummyClass.getMethod("toString", partypes);<br />17  <br />18             // parameter types for constructor<br />19             Class<?>[] constrpartypes = new Class[]{String.class, String.class};<br />20  <br />21             //Create constructor object. parameter types<br />22             Constructor<?> constr = dummyClass.getConstructor(constrpartypes);<br />23  <br />24             // create instance<br />25             Object dummyto = constr.newInstance(new Object[]{"Java Programmer", "India"});<br />26  <br />27             // Arguments to be passed into method<br />28             Object[] arglist = new Object[]{"I am"};<br />29  <br />30             // invoke method!!<br />31             String output = (String) meth.invoke(dummyto, arglist);<br />32             System.out.println(output);<br />33  <br />34         } catch (ClassNotFoundException e) {<br />35             e.printStackTrace();<br />36         } catch (SecurityException e) {<br />37             e.printStackTrace();<br />38         } catch (NoSuchMethodException e) {<br />39             e.printStackTrace();<br />40         } catch (IllegalArgumentException e) {<br />41             e.printStackTrace();<br />42         } catch (IllegalAccessException e) {<br />43             e.printStackTrace();<br />44         } catch (InvocationTargetException e) {<br />45             e.printStackTrace();<br />46         } catch (InstantiationException e) {<br />47             e.printStackTrace();<br />48         }<br />49     }<br />50 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Console for Code listing 10.2<br /><br />I am Java Programmer, India<br /><br /><br /><br /><br /><br /><br />Conclusion: Above examples demonstrate the invocation of method dynamically using reflection.<br /><br /><br /><br /><br /><br /><br /><br />To do:<br />Add some exercises like the ones in Variables<br /><br /><br /><br /><br /><br /><br /> Dynamic Class Loading<br />Java Programming/Reflection<br />Dynamic Invocation<br />Accessing Private Features with Reflection