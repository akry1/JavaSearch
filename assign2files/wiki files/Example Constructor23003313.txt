A constructor is a special method in a class which is used to construct an instance of the class. The constructor can perform initialization for the object, beyond that which the Java VM does automatically. For example, Java will automatically initialize the fields point0 and point1 to null.<br /><br /><br /><br />Code section 2.4: The constructor for the class<br /><br /><br />1 public Distance(int x0, int y0, int x1, int y1) {<br />2    point0 = new java.awt.Point(x0, y0);<br />3    point1 = new java.awt.Point(x1, y1);<br />4 }<br /><br /><br /><br /><br />The constructor above consists of five parts:<br /><br />The optional access modifier(s).<br />In this case, the constructor is declared public<br />The constructor name, which must match the class name exactly: Distance in this case.<br />The constructor parameters.<br />The parameter list is required. Even if a constructor does not have any parameters, you must specify the empty list (). The parameter list declares the type and name of each of the method's parameters.<br />An optional throws clause which declares the exceptions that the constructor may throw. This constructor does not declare any exceptions.<br />The constructor body, which is a Java block (enclosed in {}). This constructor's body contains two statements.<br /><br />This constructor accepts four parameters, named x0, y0, x1 and y1. Each parameter requires a parameter type declaration, which in this example is int for all four parameters. The parameters in the parameter list are separated by commas.<br />The two assignments in this constructor use Java's new operator to allocate two java.awt.Point objects. The first allocates an object representing the first point, (x0, y0), and assigns it to the point0 instance variable (replacing the null value that the instance variable was initialized to). The second statement allocates a second java.awt.Point instance with (x1, y1) and assigns it to the point1 instance variable.<br />This is the constructor for the Distance class. Distance implicitly extends from java.lang.Object. Java inserts a call to the super constructor as the first executable statement of the constructor if there is not one explicitly coded. The above constructor body is equivalent to the following body with the explicit super constructor call:<br /><br /><br /><br />Code section 2.5: Super constructor.<br /><br /><br />1 {<br />2    super();<br />3    point0 = new java.awt.Point(x0, y0);<br />4    point1 = new java.awt.Point(x1, y1);<br />5 }<br /><br /><br /><br /><br />While it is true that this class could be implemented in other ways, such as simply storing the coordinates of the two points and computing the distance as , this class instead uses the existing java.awt.Point class. This choice matches the abstract definition of this class: to print the distance between two points on the plane. We take advantage of existing behavior already implemented in the Java platform rather than implementing it again. We will see later how to make the program more flexible without adding much complexity, because we choose to use object abstractions here. However, the key point is that this class uses information hiding. That is, how the class stores its state or how it computes the distance is hidden. We can change this implementation without altering how clients use and invoke the class.