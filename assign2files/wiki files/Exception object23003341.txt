The preceding exception could have been created explicitly by the developer as it is the case in the following code:<br /><br /><br /><br /><br /><br /><br />Code listing 6.2: SimpleDivisionOperation.java<br /><br /><br /> 1 public class SimpleDivisionOperation {<br /> 2   public static void main(String[] args) {<br /> 3     System.out.println(divide(4, 2));<br /> 4     if (args.length > 1) {<br /> 5       // Convert a string to an integer<br /> 6       int arg0 = Integer.parseInt(args[0]);<br /> 7       int arg1 = Integer.parseInt(args[1]);<br /> 8       System.out.println(divide(arg0, arg1));<br /> 9     }<br />10   }<br />11 <br />12   public static int divide(int a, int b) {<br />13     if (b == 0) {<br />14       throw new ArithmeticException("You can\'t divide by zero!");       <br />15     } else {<br />16       return a / b;<br />17     }<br />18   }<br />19 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code listing 6.2<br /><br />$ java SimpleDivisionOperation 1 0<br />2<br />Exception in thread "main" java.lang.ArithmeticException: You can't divide by zero!<br />at SimpleDivisionOperation.divide(SimpleDivisionOperation.java:14)<br />at SimpleDivisionOperation.main(SimpleDivisionOperation.java:7)<br /><br /><br /><br /><br /><br /><br />Note that when b equals zero, there is no return value. Instead of a java.lang.ArithmeticException generated by the Java interpreter itself, it is an exception created by the coder. The result is the same. It shows you that an exception is an object. Its main particularity is that it can be thrown. An exception object must inherit from java.lang.Exception. Standard exceptions have two constructors:<br /><br />The default constructor; and,<br />A constructor taking a string argument so that you can place pertinent information in the exception.<br /><br /><br /><br /><br />Code section 6.1: Instance of an exception object with the default constructor.<br /><br /><br />1 new Exception();<br /><br /><br /><br /><br /><br /><br /><br />Code section 6.2: Instance of an Exception object by passing string in constructor.<br /><br /><br />1 new Exception("Something unexpected happened");<br /><br /><br /><br /><br />This string can later be extracted using various methods, as you can see in the code listing 6.2.<br />You can throw any type of Throwable object using the keyword throw. It interrupts the method. Anything after the throw statement would not be executed, unless the thrown exception is handled. The exception object is not returned from the method, it is thrown from the method. That means that the exception object is not the return value of the method and the calling method can be interrupted too and so on and so on...<br />Typically, you'll throw a different class of exception for each different type of error. The information about the error is represented both inside the exception object and implicitly in the name of the exception class, so someone in the bigger context can figure out what to do with your exception. Often, the only information is the type of exception, and nothing meaningful is stored within the exception object.