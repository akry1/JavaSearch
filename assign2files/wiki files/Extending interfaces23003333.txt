Execution of this example on BlueJ.<br /><br /><br />An interface can extend several interfaces, similar to the way that a class can extend another class, using the extends keyword:<br /><br /><br /><br />Code listing 4.18: InterfaceA.java<br /><br /><br />1 public interface InterfaceA {<br />2   public void methodA();<br />3 }<br /><br /><br /><br /><br /><br /><br /><br />Code listing 4.19: InterfaceB.java<br /><br /><br />1 public interface InterfaceB {<br />2   public void methodB();<br />3 }<br /><br /><br /><br /><br /><br /><br /><br />Code listing 4.20: InterfaceAB.java<br /><br /><br />1 public interface InterfaceAB extends InterfaceA, InterfaceB {<br />2   public void otherMethod();<br />3 }<br /><br /><br /><br /><br />This way, a class implementing the InterfaceAB interface has to implement the methodA(), the methodB() and the otherMethod() methods:<br /><br /><br /><br />Code listing 4.21: ClassAB.java<br /><br /><br /> 1 public class ClassAB implements InterfaceAB {<br /> 2   public void methodA() {<br /> 3     System.out.println("A");<br /> 4   }<br /> 5 <br /> 6   public void methodB() {<br /> 7     System.out.println("B");<br /> 8   }<br /> 9 <br />10   public void otherMethod() {<br />11     System.out.println("foo");<br />12   }<br />13 <br />14   public static void main(String[] args) {<br />15     ClassAB classAb = new ClassAB();<br />16     classAb.methodA();<br />17     classAb.methodB();<br />18     classAb.otherMethod();<br />19   }<br />20 }<br /><br /><br /><br /><br />Doing so, a ClassAB object can be casted into InterfaceA, InterfaceB and InterfaceAB.<br /><br />Test your knowledge<br /><br />Question 4.2: Consider the following interfaces.<br /><br /><br /><br />Question 4.2: Walkable.java<br /><br /><br />1 public interface Walkable {<br />2     void walk();<br />3 }<br /><br /><br /><br /><br /><br /><br /><br />Question 4.2: Jumpable.java<br /><br /><br />1 public interface Jumpable {<br />2     void jump();<br />3 }<br /><br /><br /><br /><br /><br /><br /><br />Question 4.2: Swimable.java<br /><br /><br />1 public interface Swimable {<br />2     void swim();<br />3 }<br /><br /><br /><br /><br /><br /><br /><br />Question 4.2: Movable.java<br /><br /><br />1 public interface Movable extends Walkable, Jumpable {<br />2 }<br /><br /><br /><br /><br />List all the methods that an implementing class of Movable should implement.<br /><br />Answer<br /><br /><br />walk()<br />jump()<br /><br /><br /><br /><br />Answer 4.2: Person.java<br /><br /><br />1 public class Person implements Movable {<br />2     public void walk() {<br />3         System.out.println("Do something.");<br />4     }<br />5 <br />6     public void jump() {<br />7         System.out.println("Do something.");<br />8     }<br />9 }<br /><br /><br /><br /><br /><br /><br />Question 4.3: Consider the following classes and the following code.<br /><br /><br /><br />Question 4.3: ConsoleLogger.java<br /><br /><br />1 import java.util.Date;<br />2 <br />3 public class ConsoleLogger {<br />4     public void printLog(String log) {<br />5         System.out.println(new Date() + ": " + log);<br />6     }<br />7 }<br /><br /><br /><br /><br /><br /><br /><br />Question 4.3: FileLogger.java<br /><br /><br /> 1 import java.io.File;<br /> 2 import java.io.FileOutputStream;<br /> 3 <br /> 4 public class FileLogger {<br /> 5   public void printLog(String log) {<br /> 6     try {<br /> 7       File file = new File("log.txt");<br /> 8       FileOutputStream stream = new FileOutputStream(file);<br /> 9       byte[] logInBytes = (new Date() + ": " + log).getBytes();<br />10 <br />11       stream.write(logInBytes);<br />12 <br />13       stream.flush();<br />14       stream.close();<br />15     } catch (Exception e) {<br />16       e.printStackTrace();<br />17     }<br />18   }<br />19 }<br /><br /><br /><br /><br /><br /><br /><br />Question 4.3: Common code.<br /><br /><br />1 Object[] loggerArray = new Object[2];<br />2 loggerArray[0] = new ConsoleLogger();<br />3 loggerArray[1] = new FileLogger();<br />4 <br />5 for (Object logger : loggerArray) {<br />6     // logger.printLog("Check point.");<br />7 }<br /><br /><br /><br /><br />Change the implementation of the code in order to be able to uncomment the commented line without compile error.<br /><br />Answer<br /><br />You have to create an interface that defines the method printLog(String) and makes ConsoleLogger and FileLogger implement it:<br /><br /><br /><br />Answer 4.3: Logger.java<br /><br /><br />1 public interface Logger {<br />2     void printLog(String log);<br />3 }<br /><br /><br /><br /><br /><br /><br /><br />Answer 4.3: ConsoleLogger.java<br /><br /><br />1 import java.util.Date;<br />2 <br />3 public class ConsoleLogger implements Logger {<br />4     public void printLog(String log) {<br />5         System.out.println(new Date() + ": " + log);<br />6     }<br />7 }<br /><br /><br /><br /><br /><br /><br /><br />Answer 4.3: FileLogger.java<br /><br /><br /> 1 import java.io.File;<br /> 2 import java.io.FileOutputStream;<br /> 3 <br /> 4 public class FileLogger implements Logger {<br /> 5   public void printLog(String log) {<br /> 6     try {<br /> 7       File file = new File("log.txt");<br /> 8       FileOutputStream stream = new FileOutputStream(file);<br /> 9       byte[] logInBytes = (new Date() + ": " + log).getBytes();<br />10 <br />11       stream.write(logInBytes);<br />12 <br />13       stream.flush();<br />14       stream.close();<br />15     } catch (Exception e) {<br />16       e.printStackTrace();<br />17     }<br />18   }<br />19 }<br /><br /><br /><br /><br />Now your code has to cast the objects to the Logger type and then you can uncomment the code.<br /><br /><br /><br />Answer 4.3: Common code.<br /><br /><br />1 Logger[] loggerArray = new Logger[2];<br />2 loggerArray[0] = new ConsoleLogger();<br />3 loggerArray[1] = new FileLogger();<br />4 <br />5 for (Logger logger : loggerArray) {<br />6     logger.printLog("Check point.");<br />7 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /> Inheritance<br />Java Programming<br />Interfaces<br />Overloading Methods and Constructors