Generally, it is best to make data private or protected. Access to the data is controlled by setter and getter methods. This lets the programmer control access to data, allowing him/her to check for and handle invalid data.<br /><br /><br /><br />Code section 3.51: Encapsulation.<br /><br /><br /> 1 private String name;<br /> 2 <br /> 3 /**<br /> 4  * This is a getter method because it accesses data from the object.<br /> 5  */<br /> 6 public String getName() {<br /> 7   return name;<br /> 8 }<br /> 9 <br />10 /**<br />11  * This is a setter method because it changes data in the object.<br />12  */<br />13 public boolean setName(String newName) {<br />14   if (newName == null) {<br />15     return false;<br />16   } else {<br />17     name = newName;<br />18     return true;<br />19   }<br />20 }<br /><br /><br /><br /><br />In the code section 3.51, the setName() method will only change the value of name if the new name is not null. Because setName() is conditionally changing name, it is wise to return a boolean to let the program know if the change was successful.<br /><br />Test your knowledge<br /><br />Question 3.15: Consider the following class.<br /><br /><br /><br />Question 3.15: Question15.java<br /><br /><br /> 1 public class Question15 {<br /> 2 <br /> 3     public static final int QKQKQKQK_MULTIPLIER = 2;<br /> 4 <br /> 5     public int ijijijijijijijijijAwfulName = 20;<br /> 6 <br /> 7     private int unununununununununCrummyName = 10;<br /> 8 <br /> 9     private void mememememememeUglyName(int i) {<br />10         i = i++;<br />11         tltltltltltltltltlBadName();<br />12         int j = i * QKQKQKQK_MULTIPLIER;<br />13     }<br />14 <br />15     public void tltltltltltltltltlBadName() {<br />16         int k = ijijijijijijijijijAwfulName;<br />17     }<br />18 <br />19     public static void main(String[] args) {<br />20         mememememememeUglyName(unununununununununCrummyName);<br />21     }<br />22 }<br /><br /><br /><br /><br />List the fields and methods of this class that can be renamed without changing or even knowing the client classes.<br /><br />Answer<br /><br /><br />unununununununununCrummyName<br />mememememememeUglyName()<br /><br />Every field or method that is public can be directly called by a client class so this class would return a compile error if the field or the method has a new name.<br /><br /><br /><br /><br /><br /><br /><br /> Packages<br />Java Programming<br />Scope<br />Arrays