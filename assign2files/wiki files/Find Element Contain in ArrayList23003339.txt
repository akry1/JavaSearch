Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that (o==null ? e==null : o.equals(e)).<br /><br /><br /><br />boolean contains(Object o)<br /><br />Different Method in ArrayList<br /><br /><br /> <br />public class ArrayListDemo {<br />	public static void main(String[] args) {<br />		// create an array list<br />		ArrayList al = new ArrayList();<br /><br />		// add elements to the array list<br />		al.add("A");<br />		al.add("B");<br />		al.add("C");<br />		al.add("A");<br />		al.add("D");<br />		al.add("A");<br />		al.add("E");<br />		System.out.println("Contents of al : " + al);<br /><br />		// find index of element in ArrayList<br />		System.out.println("Index of D : " + al.indexOf("D"));<br />		System.out.println("Index of A : " + al.indexOf("A"));<br /><br />		// find index of element in ArrayList<br />		System.out.println("Index of A : " + al.lastIndexOf("A"));<br /><br />		// get element at given Index<br />		System.out.println("Element at Second Index : " + al.get(2));<br />		System.out.println("Element at Sixth Index : " + al.get(6));<br />		<br />		//set element at given Index<br />		al.set(3,"B"); // replacing third index element by "B"<br />		System.out.println("Contents of al : " + al);<br />		<br />		//check ArrayList contains given element<br />		System.out.println("ArrayList contain D : "+al.contains("D"));<br />		System.out.println("ArrayList contain F : "+al.contains("F"));<br />	}<br />}<br /><br />Output for Different Method in ArrayList<br /><br /><br /><br /><br /><br />Contents of al : [A, B, C, A, D, A, E]<br />Index of D : 4<br />Index of A : 0<br />Index of A : 5<br />Element at Second Index : C<br />Element at Sixth Index : E<br />Contents of al : [A, B, C, B, D, A, E]<br />ArrayList contain D : true<br />ArrayList contain F : false<br /><br /><br /><br /><br />Test your knowledge<br /><br />Question: Consider the following code:<br /><br /><br /><br /><br /><br /><br />public class ArrayListDemo {<br />		public static void main(String[] args) {<br />	<br />		ArrayList al = new ArrayList();<br /><br />		al.add("A");<br />		al.add("B");<br />		al.add("C");<br />		al.add("E");<br />		al.add("F");<br />	<br />		al.remove(2);<br />		al.remove("F");<br />		<br />		al.set(1, "G");<br />		al.add("H");<br />		al.set(3, "I");<br />		System.out.println("Size of al : " + al.size());<br />		System.out.println("Contents of al : " + al);<br /><br />	}<br />  }<br /><br /><br /><br /><br /><br />In the example above, what is output?<br /><br />Answer<br /><br /><br /><br /><br /><br /><br />Size of al : 4<br />Contents of al : [A, G, E, I]<br /><br /><br /><br /><br /><br /><br /><br />Some more ArrayList methods:<br /><br /><br />Method<br />Description<br /><br /><br />Object clone()<br />Returns a shallow copy of this ArrayList.<br /><br /><br />Object[] toArray()<br />Returns an array containing all of the elements in this list in the correct order. Throws NullPointerException if the specified array is null.<br /><br /><br />void trimToSize()<br />Trims the capacity of this ArrayList instance to be the list's current size.<br /><br /><br />void ensureCapacity(int minCapacity)<br />Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.<br /><br /><br />protected void removeRange(int fromIndex, int toIndex)<br />Removes from this List all of the elements whose index is between fromIndex, inclusive and toIndex, exclusive.<br /><br /><br /><br /><br /> Collections<br />Java Programming<br />ArrayList<br />Map