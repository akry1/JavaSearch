The final keyword only allows a single assignment for the variable. That is to say, once the variable has been assigned, its value is in read-only. If the variable is a primitive type, its value will no longer change. If it is an object, only its reference will no longer change. Keep in mind that its value can still be changed.<br /><br /><br /><br />Code section 2: Forbidden double assignment.<br /><br /><br />1 final int a = 1;<br />2 a = 2;<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Code section 3: Only modify the value of the object.<br /><br /><br />1 final ArrayList list = new ArrayList();<br />2 System.out.println(list.size());<br />3 list.add("One item");<br />4 System.out.println(list.size());<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Console for Code section 3<br /><br />0<br />1<br /><br /><br /><br /><br /><br /><br />A final variable is often used for universal constants, such as pi:<br /><br /><br /><br />Code section 4: Pi constant.<br /><br /><br />1 static final double PI = 3.1415926;<br /><br /><br /><br /><br />The final keyword can also be used for method parameters:<br /><br /><br /><br />Code section 5: Final method parameter.<br /><br /><br />1 public int method(final int inputInteger) {<br />2    int outputInteger = inputInteger + 1;<br />3    return outputInteger;<br />4 }<br /><br /><br /><br /><br />It is useful for methods that use side effects to update some objects. Such methods modify the content of an object passed in parameter. The method caller will recieve the object update. This will fail if the object parameter has been reassigned in the method. Another object will be updated instead. Final method parameter can also be used to keep the code clean.<br />The final keyword is similar to const in other languages and the readonly keyword in C#. A final variable cannot be volatile.