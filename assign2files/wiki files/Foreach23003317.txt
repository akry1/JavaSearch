Arrays haven't been covered yet, but you'll want to know how to use the enhanced for loop, called the for-each loop. The for-each loop automatically iterates through a list or array and assigns the value of each index to a variable.<br />To understand the structure of a for-each loop, look at the following example:<br /><br /><br /><br /><br /><br /><br />Code section 3.33: A for-each loop.<br /><br /><br />1 String[] sentence = {"I", "am", "a", "Java", "program."};<br />2 for (String word : sentence) {<br />3     System.out.print(word + " ");<br />4 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for code section 3.33<br /><br />I am a Java program.<br /><br /><br /><br /><br /><br /><br />The example iterates through an array of words and prints them out like a sentence. What the loop does is iterate through sentence and assign the value of each index to word, then execute the code block.<br />Here is the general contract of the for-each loop:<br /><br /><br />for (variable declarationÂ : array or list) {<br /><br />statement1<br />statement2<br />...<br />statementn<br /><br />}<br /><br /><br /><br />Make sure that the type of the array or list is assignable to the declared variable, or you will get a compilation error. Notice that the loop automatically exits after the last item in the collection has been examined in the statement block.<br />Although the enhanced for loop can make code much clearer, it can't be used in some common situations.<br /><br />Only access. Elements can not be assigned to, eg, not to increment each element in a collection.<br />Only single structure. It's not possible to traverse two structures at once, eg, to compare two arrays.<br />Only single element. Use only for single element access, eg, not to compare successive elements.<br />Only forward. It's possible to iterate only forward by single steps.<br />At least Java 5. Don't use it if you need compatibility with versions before Java 5.