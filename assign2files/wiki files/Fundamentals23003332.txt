Every class in Java can be composed of the following elements:<br /><br />fields or member variables or instance variables — Fields are variables that hold data specific to each object. For example, an employee might have an ID number. There is one field for each object of a class.<br />member methods or instance variables — Member methods perform operations on an object. For example, an employee might have a method to issue his paycheck or to access his name.<br />static fields — Static fields are common to any object of the same class. For example, a static field within the Employee class could keep track of the last ID number issued. Only one static field exists for one class.<br />static methods — Static methods are methods that do not affect a specific object.<br />inner classes — Sometimes it is useful to contain a class within another one if it is useless outside of the class or should not be accessed outside the class.<br />Constructors — A special method that generates a new object.<br />Parameterized types — Since 1.5, parameterized types can be assigned to a class during definition. The parameterized types will be substituted with the types specified at the class's instantiation. It is done by the compiler. It is similar to the C language macro '#define' statement, where a preprocessor evaluates the macros.<br /><br /><br /><br /><br />Code listing 4.1: Employee.java<br /><br /><br /> 1 public class Employee {              // This defines the Employee class.<br /> 2                                      // The public modifier indicates that<br /> 3                                      // it can be accessed by any other class<br /> 4 <br /> 5     private static int nextID;       // Define a static field. Only one copy of this will exist,<br /> 6                                      // no matter how many Employees are created.<br /> 7 <br /> 8     private int myID;                // Define fields that will be stored  <br /> 9     private String myName;           // for each Employee. The private modifier indicates that<br />10                                      // only code inside the Employee class can access it.<br />11  <br />12     public Employee(String name) {   // This is a constructor. You can pass a name to the constructor<br />13                                      // and it will give you a newly created Employee object.<br />14         myName = name;<br />15         myID = nextID;               // Automatically assign an ID to the object<br />16         nextID++;                    // Increment the ID counter<br />17     }<br />18  <br />19     public String getName() {        // This is a member method that returns the<br />20                                      // Employee object's name.<br />21         return myName;               // Note how it can access the private field myName.<br />22     }<br />23  <br />24     public int getID() {             // This is another member method.<br />25    <br />26         return myID;  <br />27     }<br />28  <br />29     public static int getNextID() {  // This is a static method that returns the next ID<br />30                                      // that will be assigned if another Employee is created.<br />31         return nextID;<br />32     }<br />33 }<br /><br /><br /><br /><br />The following Java code would produce this output:<br /><br /><br /><br /><br /><br /><br />Code listing 4.2: EmployeeList.java<br /><br /><br /> 1 public class EmployeeList {<br /> 2     public static void main(String[] args) {<br /> 3 <br /> 4         System.out.println(Employee.getNextID());<br /> 5  <br /> 6         Employee a = new Employee("John Doe");<br /> 7         Employee b = new Employee("Jane Smith");<br /> 8         Employee c = new Employee("Sally Brown");<br /> 9  <br />10         System.out.println(Employee.getNextID());<br />11  <br />12         System.out.println(a.getID() + ": " + a.getName());<br />13         System.out.println(b.getID() + ": " + b.getName());<br />14         System.out.println(c.getID() + ": " + c.getName());<br />15     }<br />16 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Console for Code listing 4.2<br /><br />0<br />3<br />0: John Doe<br />1: Jane Smith<br />2: Sally Brown