ComProtocolÂ <br />This class implements, and encapsulates the communication logic (protocol). The protocol is the following:<br /><br />The client initiate the connection.<br />The server accepts it and sends an acknowledgment notifying that it's ready<br />The client sends a request<br />The server response based on the request<br /><br /><br />...<br /><br />The client sends a BYE request<br />The server acknowledge the BYE request and disconnects the socket connection<br />The client gets the acknowledgment to the BYE<br /><br /><br />...<br /><br />The client sends a SHUTDOWN request<br />The server acknowledge the SHUTDOWN request and disconnects and also stops listening of other clients.<br />The client gets the acknowledgment to the SHUTDOWN<br /><br /><br /><br /><br /><br /><br />Code listing 1.3: ComProtocol<br /><br /><br /> class '''ComProtocol'''<br /> {<br />  private static final int COM_STATUS_WAITING    = 0; <br />  private static final int COM_STATUS_READY_SENT = 1;<br />  private static final int COM_STATUS_DATA_SENT  = 2;<br />  private static final int COM_STATUS_WAITING_FOR_TERMINALID = 3;<br />  private int state = COM_STATUS_WAITING;<br />  <br />  // --- Reference to 'BACK-END' module ---  <br />  private MqTeAccess mqTe;<br />  ...<br />    /**<br />     * Create a protokol object; CAll MQ INI function<br />     */<br />    public ComProtocol()<br />    {<br />     int    iRet = 0;<br />        // --- Initialize 'BACK-END' modules  ---<br />        mqTe. ...<br /> ...<br />    }<br />    /**<br />     * --- Process the Input and Create the output to the Client ---<br />     */<br />    public COM_DATA processInput( COM_DATA theInput )<br />    {<br />     COM_DATA theOutput;<br />        // --- Initialize Variables ---<br />        theOutput = new COM_DATA();<br />        // --- Check if the Clients want to disconnect ---<br />        if ( theInput != null ) <br />        {<br />            if ( theInput.comData.equals('''"!BYE.@"''') )<br />            {<br />                // --- The Client wants to terminate; Echo data back to client<br />                theOutput.comData = "BYE.";<br />                // --- Mark the comunication to be terminated ---<br />                theOutput.bExit = true;<br />                // --- Set the internal state to wait for a new client ---<br />                state = COM_STATUS_WAITING;<br />                // --- Return Data object to be sent to the client ---<br />                return theOutput;<br />            }<br />            if ( theInput.comData.equals('''"!SHUTDOWN.@"''') )<br />            {<br />                // --- The Client wants to terminate; Echo data back to client<br />                theOutput.comData = "BYE.";<br />                // --- Mark the comunication to be terminated ---<br />                theOutput.bExit = true;<br />                // --- Tell the server to stop listening for new clients ---<br />                ComServer.GL_listening = false;<br />                // --- Set the internal state to wait for a new client ---<br />                state = COM_STATUS_WAITING;<br />                // --- Return Data object to be sent to the client ---<br />                return theOutput;<br />            }<br />        }<br />        if ( state == COM_STATUS_WAITING )<br />        {<br />            // --- Send ready Message to the Client ---<br />            theOutput.comData = "Ready:";<br />            // --- Set the internal state ready; and wait for TerminalId ---<br />            state = COM_STATUS_WAITING_FOR_TERMINALID;<br />        }<br />        else if ( state == COM_STATUS_WAITING_FOR_TERMINALID )<br />        {<br />         int iRet;<br />            // --- Get the Terminal ID ---<br />            sTermId = theInput.comData; <br />            // --- Call 'BACK-END' modules ...  ---<br />            mqTe. ...<br /> ...<br />            // --- Send ready Message with the Server Version to the Client ---<br />            theOutput.comData = "Ready;Server Version 1.0:";<br />            // --- Set the internal state raedy; and wait for TerminalId ---<br />            state = COM_STATUS_READY_SENT;<br />        }<br />        else if ( state == COM_STATUS_READY_SENT )<br />        {<br />         int iRet;<br />            String sCommand = theInput.comData;<br />            // --- Call 'BACK-END' modules ...<br /> ...<br />            /*<br />            ** --- Check if we should get Response data ---<br />            */<br />            if ( theInput.iRet == COM_DATA.NOWAIT_FOR_RESPONSE ) {<br />                // -- Set the Output Value ---<br />                theOutput.iRet = iRet;<br />                theOutput.comData = "";<br />            }<br />            else {<br />                // --- Call 'BACK-END' modules ---<br />                mqTe. ...<br />                // --- Set the Output Value ---<br />                theOutput.comData    = mqTe.sResponseBuffer; <br />                theOutput.iRet       = iRet;<br />            }<br />        }<br />     return theOutput;<br />    }  // --- End of Method processInput() ---<br /> } // --- End of ComProtocol Class Definition ---<br /><br />----