Strings are immutable; that is, they cannot be modified once created. Whenever it looks as if a String object was modified actually a new String object was created. For instance, the String.trim() method returns the string with leading and trailing whitespace removed. Actually, it creates a new trimmed string and then returns it. Pay attention on what happens in Code section 3.82:<br /><br /><br /><br /><br /><br /><br />Code section 3.82: Immutability.<br /><br /><br />1 String badlyCutText = "     Java is great.     ";<br />2 System.out.println(badlyCutText);<br />3 <br />4 badlyCutText.trim();<br />5 System.out.println(badlyCutText);<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.82<br /><br />     Java is great.    <br />     Java is great.    <br /><br /><br /><br /><br /><br /><br />The trim() method call does not modify the object so nothing happens. It creates a new trimmed string and then throws it away.<br /><br /><br /><br /><br /><br /><br />Code section 3.83: Assignment.<br /><br /><br />1 String badlyCutText = "     Java is great.     ";<br />2 System.out.println(badlyCutText);<br />3 <br />4 badlyCutText = badlyCutText.trim();<br />5 System.out.println(badlyCutText);<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.83<br /><br />     Java is great.    <br />Java is great.<br /><br /><br /><br /><br /><br /><br />The returned string is assigned to the variable. It does the job as the trim() method has created a new String instance.