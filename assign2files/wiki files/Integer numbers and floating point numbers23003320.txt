The data types that one can use for integer numbers are byte, short, int and long but when it comes to floating point numbers, we use float or double. Now that we know that, we can modify the code in the code section 3.53 as:<br /><br /><br /><br />Code section 3.56: Correct floating point declaration and assignment.<br /><br /><br />1 double age = 10.5;<br /><br /><br /><br /><br />Why not float, you say? If we'd used a float, we would have to append the number with a f as a suffix, so 10.5 should be 10.5f as in:<br /><br /><br /><br />Code section 3.57: The correct way to define floating point numbers of type float.<br /><br /><br />1 float age = 10.5f;<br /><br /><br /><br /><br />Floating-point math never throws exceptions. Dividing a non-zero value by 0 equals infinity. Dividing a non-infinite value by infinity equals 0.<br /><br />Test your knowledge<br /><br />Question 3.7: Consider the following code:<br /><br /><br /><br />Question 3.7: Primitive type assignments.<br /><br /><br /> 5 ...<br /> 6 <br /> 7 a = false;<br /> 8 b = 3.2;<br /> 9 c = 35;<br />10 d = -93485L;<br />11 e = 'q';<br /><br /><br /><br /><br />These are five variables. There are a long, a byte, a char, a double and a boolean. Retrieve the type of each one.<br /><br />Answer<br /><br /><br /><br /><br />Answer 3.7: Primitive type assignments and declarations.<br /><br /><br /> 1 boolean a;<br /> 2 double b;<br /> 3 byte c;<br /> 4 long d;<br /> 5 char e;<br /> 6 <br /> 7 a = false;<br /> 8 b = 3.2;<br /> 9 c = 35;<br />10 d = -93485L;<br />11 e = 'q';<br /><br /><br /><br /><br /><br />a can only be the boolean because only a boolean can handle boolean values.<br />e can only be the char because only a char can contain a character.<br />b can only be the double because only a double can contain a decimal number here.<br />d is the long because a byte can not contain such a low value.<br />c is the remaining one so it is the byte.