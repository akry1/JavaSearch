Static variables can be used as data sharing amongst objects of the same class. For example to implement a counter that stores the number of objects created at a given time can be defined as so:<br /><br /><br /><br /><br />Code listing 1: CountedObject.java<br /><br /><br /> 1 public CountedObject {<br /> 2    private static int counter;<br /> 3    ...<br /> 4    public AClass() {<br /> 5       ...<br /> 6       counter += 1;<br /> 7    }<br /> 8    ...<br /> 9    public int getNumberOfObjectsCreated() {<br />10       return counter;<br />11    }<br />12 }<br /><br /><br /><br /><br />The counter variable is incremented each time an object is created.<br />Public static variable should not be used, as these become global variables that can be accessed from everywhere in the program. Global constants can be used, however. See below:<br /><br /><br /><br />Code section 3: Constant definition.<br /><br /><br />1 public static final String CONSTANT_VAR = "Const";<br /><br /><br /><br /><br /><br />Static methods can be used for utility functions or for functions that do not belong to any particular object. For example:<br /><br /><br /><br /><br />Code listing 2: ArithmeticToolbox.java<br /><br /><br />1 public ArithmeticToolbox {<br />2    ...<br />3    public static int addTwoNumbers(int firstNumber, int secondNumber) {<br />4         return firstNumber + secondNumber;<br />5    }<br />6 }<br /><br /><br /><br /><br /><br />See also Static methods