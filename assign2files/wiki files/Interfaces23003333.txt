An interface is an abstraction of class with no implementation details. For example, java.lang.Comparable is a standard interface in Java. You cannot instantiate an interface. An interface is not a class but it is written the same way. The first difference is that you do not use the class keyword but the interface keyword to define it. Then, there are fields and methods you cannot define here:<br /><br />A field is always a constant: it is always public, static and final, even if you do not mention it.<br />A method must be public and abstract, but it is not required to write the public and abstract keywords.<br />Constructors are forbidden.<br /><br />An interface represents a contract:<br /><br /><br /><br />Code listing 4.14: SimpleInterface.java<br /><br /><br />1 public interface SimpleInterface {<br />2     public static final int CONSTANT1 = 1;<br />3     int method1(String parameter);<br />4 }<br /><br /><br /><br /><br />You can see that the method1() method is abstract (unimplemented). To use an interface, you have to define a class that implements it, using the implements keyword:<br /><br /><br /><br />Code listing 4.15: ClassWithInterface.java<br /><br /><br />1 public class ClassWithInterface implements SimpleInterface {<br />2     int method1(String parameter) {<br />3         return 0;<br />4     }<br />5 }<br /><br /><br /><br /><br />A class can implement several interface, separated by a comma. Java interfaces behave much like the concept of the Objective-C protocol. It is recommended to name an interface <verb>able, to mean the type of action this interface would enable on a class. However, it is not recommended to start the name of an interface by I as in C++. It is useless. Your IDE will help you instead.