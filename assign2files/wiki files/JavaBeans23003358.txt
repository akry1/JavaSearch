Applets<br /><br /><br /><br /><br /> Overview<br /> User Interface<br /> Event Listeners<br /> Graphics and Media<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Reusability comes at the core of any modern computer language's framework. It is often desirable to use components you previously built in recurring environments. In Rapid Application Development, these prove more helpful as you can drag them off a list of components and use it elsewhere in your project. Such level of reusability is added into the Java Programming language with the help of the JavaBeans architecture.<br />JavaBeans are the mainstream Java component model, introduced in 1996 by Sun Microsystems. JavaBeans are defined as follows:<br />"A JavaBean is a reusable software component that can be manipulated visually in a builder tool."<br />Together with the component model, Sun released a simple visual composition tool, the BeanBox. It is mostly intended for experimenting with Beans rather than offering a professional IDE. For real world applications, one should better deploy on one of the Java IDEs like Visual Age or JBuilder that support the visual composition of JavaBeans.<br />As we will see, JavaBeans do not essentially differ from standard Java classes, which makes the component model quite easy to use. What sets a JavaBean apart from normal Java classes is that a JavaBean follows the Oracle JavaBeans Standard (the term JavaBean or simply bean also refers to the instances of a JavaBean class). There is a set of features and conventions adopted for facilitating reuse:<br /><br />Presence of a no argument constructor;<br />Support for persistence;<br />Properties manipulated by getter and setter methods;<br />Support for introspection;<br />Events as the mechanism of communication between beans;<br />Support for customization via property editors.<br /><br />The JavaBeans standard provides a framework for creating objects to be used by GUI tools, including Java development environments. But in more common usage, a bean is a serializable class that follows the JavaBeans naming conventions for its properties. These naming standards make it easy to use Java introspection.