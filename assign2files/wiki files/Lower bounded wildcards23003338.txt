<? super ClassName> specifies a restriction on the types of classes that may be used. For example, to declare a Comparator that can compare Dogs, you use:<br /><br /><br /><br />Code section 4.42: Superclass.<br /><br /><br />1 Comparator<? super Dog> myComparator;<br /><br /><br /><br /><br />Now suppose you define a comparator that can compare Animals:<br /><br /><br /><br />Code section 4.43: Comparator.<br /><br /><br />1 class AnimalComparator implements Comparator<Animal> {<br />2   int compare(Animal a, Animal b) {<br />3    //...<br />4   }<br />5 }<br /><br /><br /><br /><br />Since Dogs are Animals, you can use this comparator to compare Dogs also. Comparators for any superclass of Dog can also compare Dog; but comparators for any strict subclass cannot.<br /><br /><br /><br />Code section 4.44: Generic comparator.<br /><br /><br />1 Comparator<Animal> myAnimalComparator = new AnimalComparator();<br />2 <br />3 static int compareTwoDogs(Comparator<? super Dog> comp, Dog dog1, Dog dog2) {<br />4   return comp.compare(dog1, dog2);<br />5 }<br /><br /><br /><br /><br />The above code is valid because the Animal class is a supertype of the Dog class. Use of a class that is not a supertype would cause a compilation error.