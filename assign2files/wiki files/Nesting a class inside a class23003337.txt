When a class is declared inside another class, the nested class' access modifier can be public, private, protected or package(default).<br /><br /><br /><br />Code listing 4.10: OuterClass.java<br /><br /><br />1 public class OuterClass {<br />2    private String outerInstanceVar;<br />3 <br />4    public class InnerClass {<br />5       public void printVars() {<br />6          System.out.println("Print Outer Class Instance Var.:" + outerInstanceVar);<br />7       }<br />8    }<br />9 }<br /><br /><br /><br /><br />The inner class has access to the enclosing class instance's variables and methods, even private ones, as seen above. This makes it very different from the nested class in C++, which are equivalent to the "static" inner classes, see below.<br />An inner object has a reference to the outer object. In other words, all inner objects are tied to the outer object. The inner object can only be created through a reference to the 'outer' object. See below.<br /><br /><br /><br />Code section 4.20: Outer class call.<br /><br /><br />1 public void testInner() {<br />2     ...<br />3     OuterClass outer = new OuterClass();<br />4     OuterClass.InnerClass inner = outer.new InnerClass();  <br />5     ...<br />6 }<br /><br /><br /><br /><br />Note that inner objects, because they are tied to the outer object, cannot contain static variables or methods.<br />When in a non-static method of the outer class, you can directly use new InnerClass(), since the class instance is implied to be this.<br />You can directly access the reference to the outer object from within an inner class with the syntax OuterClass.this; although this is usually unnecessary because you already have access to its fields and methods.<br />Inner classes compile to separate ".class" bytecode files, with the name of the enclosing class, followed by a "$", followed by the name of the inner class. So for example, the above inner class would be compiled to a file named "OuterClass$InnerClass.class".