Java Generics are similar to C++ Templates in that both were added for the same reason. The syntax of Java Generic and C++ Template are also similar. There are some differences however. The C++ template can be seen as a kind of macro, in that a new copy of the code is generated for each generic type referenced. All extra code for templates is generated at compiler time. In contrast, Java Generics are built into the language. The same code is used for each generic type. For example:<br /><br /><br /><br />Code section 4.50: Java generics.<br /><br /><br />1 Collection<String>  collString  = new ArrayList<String>();<br />2 Collection<Integer> collInteger = new ArrayList<Integer>();<br /><br /><br /><br /><br />Both these objects appear as the same type at runtime (both ArrayList's). The generic type information is erased during compilation (type erasure). For example:<br /><br /><br /><br />Code section 4.51: Type erasure.<br /><br /><br />1 public <T> void method(T argument) {<br />2   T variable;<br />3   …<br />4 }<br /><br /><br /><br /><br />is transformed by erasure into:<br /><br /><br /><br />Code section 4.52: Transformation.<br /><br /><br />1 public void method(Object argument) {<br />2   Object variable;<br />3   …<br />4 }<br /><br /><br /><br /><br /><br />Test your knowledge<br /><br />Question 4.9: Consider the following class.<br /><br /><br /><br />Question 4.9: Question9.java<br /><br /><br /> 1 import java.util.ArrayList;<br /> 2 import java.util.Collection;<br /> 3 <br /> 4 public class Question9 {<br /> 5   public static void main(String[] args) {<br /> 6     Collection<String> collection1 = new ArrayList<String>();<br /> 7     Collection<? extends Object> collection2 = new ArrayList<String>();<br /> 8     Collection<? extends String> collection3 = new ArrayList<String>();<br /> 9     Collection<? extends String> collection4 = new ArrayList<Object>();<br />10     Collection<? super Object> collection5 = new ArrayList<String>();<br />11     Collection<? super Object> collection6 = new ArrayList<Object>();<br />12     Collection<?> collection7 = new ArrayList<String>();<br />13     Collection<? extends Object> collection8 = new ArrayList<?>();<br />14     Collection<? extends Object> collection9 = new ArrayList<Object>();<br />15     Collection<? extends Integer> collection10 = new ArrayList<String>();<br />16     Collection<String> collection11 = new ArrayList<? extends String>();<br />17     Collection collection12 = new ArrayList<String>();<br />18   }<br />19 }<br /><br /><br /><br /><br />Which lines will generate a compile error?<br /><br />Answer<br /><br /><br /><br /><br />Answer 4.9: Answer9.java<br /><br /><br /> 1 import java.util.ArrayList;<br /> 2 import java.util.Collection;<br /> 3 <br /> 4 public class Answer9 {<br /> 5   public static void main(String[] args) {<br /> 6     Collection<String> collection1 = new ArrayList<String>();<br /> 7     Collection<? extends Object> collection2 = new ArrayList<String>();<br /> 8     Collection<? extends String> collection3 = new ArrayList<String>();<br /> 9     Collection<? extends String> collection4 = new ArrayList<Object>();<br />10     Collection<? super Object> collection5 = new ArrayList<String>();<br />11     Collection<? super Object> collection6 = new ArrayList<Object>();<br />12     Collection<?> collection7 = new ArrayList<String>();<br />13     Collection<? extends Object> collection8 = new ArrayList<?>();<br />14     Collection<? extends Object> collection9 = new ArrayList<Object>();<br />15     Collection<? extends Integer> collection10 = new ArrayList<String>();<br />16     Collection<String> collection11 = new ArrayList<? extends String>();<br />17     Collection collection12 = new ArrayList<String>();<br />18   }<br />19 }<br /><br /><br /><br /><br /><br />Line 9: Object does not extend String.<br />Line 10: String is not a superclass of Object.<br />Line 13: ArrayList<?> can't be instantiated.<br />Line 15: Integer does not extend String.<br />Line 16: ArrayList<? extends String> can't be instantiated.<br /><br /><br /><br /><br /><br /><br /><br /> Nested Classes<br />Java Programming<br />Generics<br />Aggregate