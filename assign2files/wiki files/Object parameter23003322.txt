The object references are passed by value. It means that:<br /><br />There is no more link between the reference inside the method and the source reference,<br />The source object itself and the object itself inside the method are still the same.<br /><br />You must understand the difference between the reference of an object and the object itself. A object reference is the link between a variable name and an instance of object:<br /><br /><br />Object object ⇔ new Object()<br /><br /><br />An object reference is a pointer, an address to the object instance.<br />The object itself is the value of its attributes inside the object instance:<br /><br /><br />object.firstName<br />⇒<br />"James"<br /><br /><br />object.lastName<br />⇒<br />"Gosling"<br /><br /><br />object.birthDay<br />⇒<br />"May 19"<br /><br /><br />Take a look at the example above:<br /><br /><br /><br />Code section 3.71: A method modifying an object.<br /><br /><br />1 private void modifyObject(FirstClass anObject) {<br />2   anObject.setName("Susan");<br />3 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Code section 3.72: Parameter by reference.<br /><br /><br />1 FirstClass object = new FirstClass();<br />2 object.setName("Christin");<br />3 <br />4 modifyObject(object);<br />5 <br />6 System.out.println(object.getName());<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.72<br /><br />Susan<br /><br /><br /><br /><br /><br /><br />The name has changed because the method has changed the object itself and not the reference. Now take a look at the other example:<br /><br /><br /><br />Code section 3.73: A method modifying an object reference.<br /><br /><br />1 private void modifyObject(FirstClass anObject) {<br />2   anObject = new FirstClass();<br />3   anObject.setName("Susan");<br />4 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Code section 3.74: Parameter by reference.<br /><br /><br />1 FirstClass object = new FirstClass();<br />2 object.setName("Christin");<br />3 <br />4 modifyObject(object);<br />5 <br />6 System.out.println(object.getName());<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.74<br /><br />Christin<br /><br /><br /><br /><br /><br /><br />The name has not changed because the method has changed the reference and not the object itself. The behavior is the same as if the method was in-lined and the parameters were assigned to new variable names:<br /><br /><br /><br /><br /><br /><br />Code section 3.75: In-lined method.<br /><br /><br /> 1 FirstClass object = new FirstClass();<br /> 2 object.setName("Christin");<br /> 3 <br /> 4 // Start of the method<br /> 5 FirstClass anObject = object;<br /> 6 anObject = new FirstClass();<br /> 7 anObject.setName("Susan");<br /> 8 // End of the method<br /> 9 <br />10 System.out.println(object.getName());<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.75<br /><br />Christin