The Queue interface provides additional insertion, extraction, and inspection operations. There are FIFO (first in, first out) and LIFO (last in, first out) queues. This interface adds the following operations to the Collection interface:<br /><br /><br />E element()<br />Retrieves, but does not remove, the head of this queue. This method differs from the peek method only in that it throws an exception if this queue is empty<br /><br /><br />boolean offer(E o)<br />Inserts the specified element into this queue, if possible.<br /><br /><br />E peek()<br />Retrieves, but does not remove, the head of this queue, returning null if this queue is empty<br /><br /><br />E poll()<br />Retrieves and removes the head of this queue, or null if this queue is empty<br /><br /><br />E remove()<br />Retrieves and removes the head of this queue. This method differs from the poll method in that it throws an exception if this queue is empty.<br /><br /><br /><br /><br /><br />Figure 4: Queue class diagram.<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />java.util.BlockingQueue<E> <br />waits for the queue to become non-empty when retrieving an element, and waits for space to become available in the queue when storing an element. Best used for producer-consumer queues.<br />java.util.PriorityQueue<E> <br />orders elements according to an order/priority specified at construction time, null element is not allowed.<br />java.util.concurrent.ArrayBlockingQueue<E> <br />orders elements FIFO; synchronized, thread safe.<br />java.util.concurrent.SynchronousQueue<E> <br />each put must wait for a take, and vice versa, does not have any internal capacity, not even a capacity of one, an element is only present when you try to take it; you cannot add an element (using any method) unless another thread is trying to remove it.