To generate random numbers the Math.random() method can be used, which returns a double, greater than or equal to 0.0 and less than 1.0.<br />The following code returns a random integer between n and m (where n <= randomNumber < m):<br /><br /><br /><br />Code section 3.30: A random integer.<br /><br /><br />1   int randomNumber = n + (int)(Math.random() * ( m - n ));<br /><br /><br /><br /><br />Alternatively, the java.util.Random class provides methods for generating random booleans, bytes, floats, ints, longs and 'Gaussians' (doubles from a normal distribution with mean 0.0 and standard deviation 1.0). For example, the following code is equivalent to that above:<br /><br /><br /><br />Code section 3.31: A random integer with Gaussian.<br /><br /><br />1   Random random = new Random();<br />2   int randomNumber = n + random.nextInt(m - n);<br /><br /><br /><br /><br />As an example using random numbers, we can make a program that uses a Random object to simulate flipping a coin 20 times:<br /><br /><br /><br /><br /><br /><br />Code listing 3.25: CoinFlipper.java<br /><br /><br /> 1 import java.util.Random;<br /> 2 <br /> 3 public class CoinFlipper {<br /> 4 <br /> 5   public static void main(String[] args) {<br /> 6     // The number of times to flip the coin<br /> 7     final int TIMES_TO_FLIP = 20;<br /> 8     int heads = 0;<br /> 9     int tails = 0;<br />10     // Create a Random object<br />11     Random random = new Random();<br />12     for (int i = 0; i < TIMES_TO_FLIP; i++) {<br />13       // 0 or 1<br />14       int result = random.nextInt(2);<br />15       if (result == 1) {<br />16         System.out.println("Heads");<br />17         heads++;<br />18       } else {<br />19         System.out.println("Tails");<br />20         tails++;<br />21       }<br />22     }<br />23     System.out.println("There were "<br />24             + heads<br />25             + " heads and "<br />26             + tails<br />27             + " tails");<br />28   }<br />29 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Possible output for code listing 3.25<br /><br />Heads<br />Tails<br />Tails<br />Tails<br />Heads<br />Tails<br />Heads<br />Heads<br />Heads<br />Heads<br />Heads<br />Heads<br />Tails<br />Tails<br />Tails<br />Tails<br />Heads<br />Tails<br />Tails<br />Tails<br />There were 9 heads and 11 tails<br /><br /><br /><br /><br /><br /><br />Of course, if you run the program you will probably get different results.