So as we can see, a method may or may not return a value. If the method does not return a value we use the void Java keyword.<br />Same as the parameter passing, the method can return a primitive type or an object reference. So a method can return only one value. What if you want to return more than one value from a method. You can always pass in an object reference to the method, and let the method modify the object properties. The modified values can be considered as an output value from the method. However you can also create an Object array inside the method, assign the return values and return the array to the caller. You could have a problem however, if you want to mix primitive data types and object references as the output values from the method.<br />There is a better approach. Defines special return object with the needed return values. Create that object inside the method, assign the values and return the reference to this object. This special object is "bound" to this method and used only for returning values, so do not use a public class. The best way is to use a nested class, see example below:<br /><br /><br /><br />Code listing 3.12: Multiple returned variables.<br /><br /><br /> 1 public class MyObject {<br /> 2   ...<br /> 3  <br /> 4   /** Nested object is for return values from getPersonInfoById method */<br /> 5   public static class ReturnObject {<br /> 6       private int age;<br /> 7       private String name;<br /> 8 <br /> 9       public void setAge(int age) {<br />10           this.age = age;<br />11       }<br />12  <br />13       public int getAge() {<br />14           return age;<br />15       }<br />16 <br />17       public void setName(String name) {<br />18           name = name;<br />19       }<br />20  <br />21       public String getName() {<br />22           return name;<br />23       }<br />24   } // End of nested class definition<br />25 <br />26   /** Method using the nested class to return values */<br />27   public ReturnObject getPersonInfoById(int id) {<br />28     int    age;<br />29     String name;<br />30     ...<br />31     // Get the name and age based on the ID from the database<br />32     ...<br />33     ReturnObject result = new ReturnObject();<br />34     result.setAge(age);<br />35     result.setName(name);<br />36 <br />37     return result;<br />38   }<br />39 }<br /><br /><br /><br /><br />In the above example the getPersonInfoById method returns an object reference that contains both values of the name and the age. See below how you may use that object:<br /><br /><br /><br />Code section 3.78: Retrieving the values.<br /><br /><br />1 MyObject object = new MyObject();<br />2 MyObject.ReturnObject person = object.getPersonInfoById(102);<br />3 <br />4 System.out.println("Person Name=" + person.getName());<br />5 System.out.println("Person Age =" + person.getAge());<br /><br /><br /><br /><br /><br />Test your knowledge<br /><br />Question 3.10: Consider the following code:<br /><br /><br /><br />Question 3.10: Compiler error.<br /><br /><br />1 private int myMethod(int a, int b, String c) {<br />2   if (a > 0) {<br />3     c = "";<br />4     return c;<br />5   }<br />6   int b = b + 2;<br />7   return b;<br />8 }<br /><br /><br /><br /><br />The code above will return a compiler error. Why?<br /><br />Answer<br /><br /><br /><br /><br />Answer 3.10: Compiler error.<br /><br /><br />1 private int myMethod(int a, int b, String c) {<br />2   if (a > 0) {<br />3     c = "";<br />4     return c;<br />5   }<br />6   int b = b + 2;<br />7   return b;<br />8 }<br /><br /><br /><br /><br />The method is supposed to return a int but at line 4, it returns c, which is a String.