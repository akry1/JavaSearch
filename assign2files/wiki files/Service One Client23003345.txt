ComServerThread <br />This class extended from a Thread; Responsible to service one client. The Socket connection will be open between the client and server. A simple protocol has to be defined between the client and server, the server has to understand what the client wants from the server. The client will send a terminate command, for which the server will terminate the socket connection. The ComServerThread class is responsible to handle a client request, until the client sends a terminate command.<br /><br /><br /><br /><br />Code listing 1.2: ComServerThread<br /><br /><br /> /**<br />  * -- A class extended from a Thread; Responsible to service one client --<br />  */<br /> class '''ComServerThread''' extends Thread<br /> {<br />    private Socket clientSocket = null;<br />    COM_DATA tDataFromClient;<br />    COM_DATA tDataToClient; <br />    ObjectInputStream oIn;<br />    ObjectOutputStream oOut;<br />    /**<br />     * -- Constructor --<br />     */<br />    public ComServerThread( Socket socket )<br />    {<br />       super( "ComServerThread" );<br />       this.clientSocket = socket;<br />    } // -- End of ComServerThread() constructor --<br />    /**<br />     * -- Overrun from the Thread (super) class --<br />     */<br />    public void run()<br />    {<br />       try {<br />          // --- Create the Writer; will be used to send data to client ---<br />          oOut = new ObjectOutputStream( clientSocket.getOutputStream() );<br />          // --- Create the Reader; will be used to get data from client ---<br />          oIn  = new ObjectInputStream( clientSocket.getInputStream() );<br />          // --- Create a new protocol object ---<br />          ComProtocol comp = new ComProtocol();<br />          // --- Send something to client to indicate that server is ready ---<br />          tDataToClient  = '''comp.processInput( null );'''<br />          '''sendDataToClient'''( tDataToClient, oOut );<br />          // --- Get the data from the client ---<br />          while ( true )<br />          {<br />             try {<br />                tDataFromClient = '''getDataFromClient( oIn )''';<br />                // --- Parse the request and get the reply ---<br />                tDataToClient = '''comp.processInput( tDataFromClient );'''<br />                // --- Send data to the Client ---<br />                '''sendDataToClient'''( tDataToClient, oOut );<br />             }<br />             catch ( EOFException e ) {<br />                System.out.println( "Client Disconnected, Bye, Bye" );<br />                break;<br />             }<br />             // --- See if the Client wanted to terminate the connection ---<br />             if ( tDataToClient.bExit )<br />             {<br />                System.out.println( "Client said Bye. Bye" );<br />                break;<br />             }<br />          }<br />          // --- Close resources;  This client is gone ---<br />          comp.Final();<br />          oOut.close();<br />          oIn.close();<br />          clientSocket.close();<br />       } catch ( IOException e ) {<br />        e.printStackTrace();<br />       }<br />    } // -- End of run() Method --<br />    /**<br />     * Get data from Client <br />     */<br />    private static COM_DATA '''getDataFromClient'''( ObjectInputStream oIn ) throws IOException                                                                         <br />    {<br />        COM_DATA  tDataFromClient = null;         <br />        // --- Initialize variables ---<br />        //   tDataFromClient = new COM_DATA();<br />        while ( tDataFromClient == null )<br />        {<br />           try {<br />              // --- Read Line Number first --<br />              tDataFromClient = (COM_DATA) oIn.readObject();<br />           } catch ( ClassNotFoundException e ) {<br />               System.out.println( "ClassNotFound" );<br />           }<br />        }<br />        System.out.println( "Get: " + tDataFromClient.comData );<br />     return tDataFromClient;<br />    } // --- getDataFromClient() Method --- <br />    /**<br />     * Send data to Client <br />     */<br />    private static void '''sendDataToClient'''( COM_DATA tDataToClient,<br />                                           ObjectOutputStream  oOut ) throws IOException<br />    {         <br />        System.out.println( "Sent: " + tDataToClient.comData );<br />        oOut.writeObject( tDataToClient );<br />      return;<br />    } // -- End of sendDataToClient() Method --<br /> } // --- End of ComServerThread class ---<br /><br /><br /><br /><br /><br />COM_DATA tDataFromClient <br />This variable will contain the data object from the client.<br />COM_DATA tDataToClient <br />This variable will contain the data object to be sent to the client.<br />sendDataToClient <br />This method sends the data object to the client.<br />getDataFromClient <br />This method gets the data object from the client.<br />processInput( tDataFromClient ) <br />This method of the class ComProtocol interprets the client commands and returns the data object that will be sent back to the client.