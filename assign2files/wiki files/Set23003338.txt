A set collection contains unique elements, so duplicates are not allowed. It is similar to a mathematical Set. When adding a new item to a set, the set calls the method int hashCode() of the item and compare it to the hash code of all the already inserted items. If the hash code has not been found, the item is added. If it is, the set now call the boolean equals(Object obj); method with all the set items. If all calls returns false, the item is inserted. If not, the item is not inserted.<br /><br /><br /><br />Figure 2: Set class diagram.<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />java.util.HashSet<E> <br />This is the basic implementation of the Set interface. Not synchronized. Allows the null elements<br />java.util.TreeSet<E><br />Elements are sorted, not synchronized. null not allowed<br />java.util.CopyOnWriteArraySet<E> <br />Thread safe, a fresh copy is created during modification operation. Add, update, delete are expensive.<br />java.util.EnumSet<E extends Enum<E>> <br />All of the elements in an enum set must come from a single enum type that is specified, explicitly or implicitly, when the set is created. Enum sets are represented internally as bit vectors.<br />java.util.LinkedHashSet<E> <br />Same as HashSet, plus defines the iteration ordering, which is the order in which elements were inserted into the set.