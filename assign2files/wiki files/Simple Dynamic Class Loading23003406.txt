An easy way to dynamically load a Class is via the java.net.URLClassLoader class. This class can be used to load a Class or a collection of classes that are accessible via a URL. This is very similar to the -classpath parameter in the java executable. To create a URLClassLoader, use the factory method (as using the constructor requires a security privilege):<br /><br /><br /><br />Code section 10.4: Class loader.<br /><br /><br />1 URLClassLoader classLoader = URLClassLoader.newInstance(<br />2    new URL[]{"http://example.com/javaClasses.jar"});<br /><br /><br /><br /><br />Unlike other dynamic class loading techniques, this can be used even without security permission provided the classes come from the same Web domain as the caller. Once a ClassLoader instance is obtained, a class can be loaded via the loadClass method. For example, to load the class com.example.MyClass, one would:<br /><br /><br /><br />Code section 10.5: Class loading.<br /><br /><br />1 Class<?> clazz = classLoader.load("com.example.MyClass");<br /><br /><br /><br /><br />Executing code from a Class instance is explained in the Dynamic Invocation chapter.<br /><br /><br /><br /><br /><br /><br /><br />To do:<br />Add some exercises like the ones in Variables<br /><br /><br /><br /><br /><br /><br /> Overview<br />Java Programming/Reflection<br />Dynamic Class Loading<br />Dynamic Invocation