As an example, we can show a thread-safe version of a singleton:<br /><br /><br /><br />Code listing 1: Singleton.java<br /><br /><br /> 1 /**<br /> 2  * The singleton class that can be instantiated only once with lazy instantiation<br /> 3  */<br /> 4 public class Singleton {<br /> 5     /** Static class instance */<br /> 6     private volatile static Singleton instance = null;<br /> 7 <br /> 8     /**<br /> 9      * Standard private constructor<br />10      */<br />11     private Singleton() {<br />12         // Some initialisation<br />13     }<br />14    <br />15     /**<br />16      * Getter of the singleton instance<br />17      * @return The only instance<br />18      */<br />19     public static Singleton getInstance() {<br />20         if (instance == null) {<br />21             // If the instance does not exist, go in time-consuming<br />22             // section:<br />23             synchronized (Singleton.class) {<br />24                 if (instance == null) {<br />25                     instance = new Singleton();<br />26                 }<br />27             }<br />28         }<br />29 <br />30         return instance;<br />31     }<br />32  }