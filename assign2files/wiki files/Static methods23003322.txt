A static method is a method that can be called without an object instance. It can be called on the class directly. For example, the valueOf(String) method of the Integer class is a static method:<br /><br /><br /><br />Code section 3.79: Static method.<br /><br /><br />1 Integer i = Integer.valueOf("10");<br /><br /><br /><br /><br />As a consequence, it cannot use the non-static methods of the class but it can use the static ones. The same way, it cannot use the non-static attributes of the class but it can use the static ones:<br /><br /><br /><br />Code section 3.80: Static attribute.<br /><br /><br />1 private static int count = 0;<br />2 <br />3 public static int getNewInteger() {<br />4   return count++;<br />5 }<br /><br /><br /><br /><br />You can notice that when you use System.out.println(), out is a static attribute of the System class. A static attribute is related to a class, not to any object instance, so there is only one value for all the object instances. This attribute is unique in the whole Java Virtual Machine. All the object instances use the same attribute:<br /><br /><br /><br /><br /><br /><br />Code listing 3.14: A static attribute.<br /><br /><br /> 1 public class MyProgram {<br /> 2 <br /> 3     public static int count = 0;<br /> 4 <br /> 5     public static void main (String[] args) {<br /> 6         MyProgram.count++;<br /> 7 <br /> 8         MyProgram program1 = new MyProgram();<br /> 9         program1.count++;<br />10 <br />11         MyProgram program2 = new MyProgram();<br />12         program2.count++;<br />13 <br />14         new MyProgram().count++;<br />15         System.out.println(MyProgram.count);<br />16     }<br />17 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code listing 3.14<br /><br />4<br /><br /><br /><br /><br /><br /><br /><br />Test your knowledge<br /><br />Question 3.11: Visit the Oracle JavaDoc of the class java.lang.Integer.<br />How many static fields does this class have?<br /><br />Answer<br /><br />4.<br /><br />int MAX_VALUE,<br />int MIN_VALUE,<br />int SIZE and<br />Class<Integer> TYPE.<br /><br /><br /><br /><br /><br /><br />To learn how to overload and override a method, see Overloading Methods and Constructors.<br /><br /><br /><br /><br /> Literals<br />Java Programming<br />Methods<br />API/java.lang.String