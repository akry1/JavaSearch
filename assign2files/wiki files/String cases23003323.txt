The String class also allows for the modification of cases. The two methods that make this possible are toLowerCase() and toUpperCase().<br /><br /><br /><br /><br /><br /><br />Code section 3.96: Case modification.<br /><br /><br />1 String str = "wIkIbOoKs";<br />2 System.out.println(str.toLowerCase());<br />3 System.out.println(str.toUpperCase());<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.96<br /><br />wikibooks<br />WIKIBOOKS<br /><br /><br /><br /><br /><br /><br />These methods are useful to do a search which is not case sensitive:<br /><br /><br /><br /><br /><br /><br />Code section 3.97: Text search.<br /><br /><br /> 1 String word = "Integer";<br /> 2 String text = "A number without a decimal part is an integer."<br /> 3   + " Integers are a list of digits.";<br /> 4 <br /> 5 ...<br /> 6 <br /> 7 // Remove the case<br /> 8 String lowerCaseWord = word.toLowerCase();<br /> 9 String lowerCaseText = text.toLowerCase();<br />10 <br />11 // Search<br />12 int index = lowerCaseText.indexOf(lowerCaseWord);<br />13 while (index != -1) {<br />14   System.out.println(word<br />15     + " appears at column "<br />16     + (index + 1)<br />17     + ".");<br />18   index = lowerCaseText.indexOf(lowerCaseWord, index + 1);<br />19 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.97<br /><br />Integer appears at column 38.<br />Integer appears at column 47.<br /><br /><br /><br /><br /><br /><br /><br />Test your knowledge<br /><br />Question 3.12: You have mail addresses in the following form: <firstName>.<lastName>@<companyName>.org<br />Write the String getDisplayName(String) method that receives the mail string as parameter and returns the readable person name like this: LASTNAME Firstname<br /><br />Answer<br /><br /><br /><br /><br />Answer 3.12: getDisplayName()<br /><br /><br /> 1 public static String getDisplayName(String mail) {<br /> 2   String displayName = null;<br /> 3  <br /> 4   if (mail != null) {<br /> 5     String[] mailParts = mail.split("@");<br /> 6     String namePart = mailParts[0];<br /> 7     String[] namesParts = namePart.split("\\.");<br /> 8    <br /> 9     // The last name<br />10     String lastName = namesParts[1];<br />11     lastName = lastName.toUpperCase();<br />12    <br />13     // The first name<br />14     String firstName = namesParts[0];<br />15    <br />16     String firstNameInitial = firstName.substring(0, 1);<br />17     firstNameInitial = firstNameInitial.toUpperCase();<br />18    <br />19     String firstNameEnd = firstName.substring(1);<br />20     firstNameEnd = firstNameEnd.toLowerCase();<br />21    <br />22     // Concatenation<br />23     StringBuilder displayNameBuilder = new StringBuilder(lastName).append(" ").append(firstNameInitial).append(firstNameEnd);<br />24     displayName = displayNameBuilder.toString();<br />25   }<br />26  <br />27   return displayName;<br />28 }<br /><br /><br /><br /><br /><br />We only process non null strings,<br />We first split the mail into two parts to separate the personal information from the company information and we keep the name data,<br />Then we split the name information to separate the first name from the last name. As the split() method use regular expression and . is a wildcard character, we have to escape it (\.). However, in a string, the \ is also a special character, so we need to escape it too (\\.),<br />The last name is just capitalized,<br />As the case of all the first name characters will not be the same, we have to cut the first name. Only the first name initial will be capitalized,<br />Now we can concatenate all the fragments. We prefer to use a StringBuilder to do that.