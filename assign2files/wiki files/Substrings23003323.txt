It may also be sometimes useful to create substrings, or strings using the order of letters from an existing string. This can be done in two methods.<br />The first method involves creating a substring out of the characters of a string from a given index to the end:<br /><br /><br /><br /><br /><br /><br />Code section 3.94: Truncating string.<br /><br /><br />1 String str = "coffee";<br />2 System.out.println(str.substring(3));<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.94<br /><br />fee<br /><br /><br /><br /><br /><br /><br />The index of the first character in a string is 0.<br /><br /><br />c<br />o<br />f<br />f<br />e<br />e<br /><br /><br />0<br />1<br />2<br />3<br />4<br />5<br /><br /><br />By counting from there, it is apparent that the character in index 3 is the second "f" in "coffee". This is known as the beginIndex. All characters from the beginIndex until the end of the string will be copied into the new substring.<br />The second method involves a user-defined beginIndex and endIndex:<br /><br /><br /><br /><br /><br /><br />Code section 3.95: Extraction of string.<br /><br /><br />1 String str = "supporting";<br />2 System.out.println(str.substring(3, 7));<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for Code section 3.95<br /><br />port<br /><br /><br /><br /><br /><br /><br />The string returned by substring() would be "port".<br /><br /><br />s<br />u<br />p<br />p<br />o<br />r<br />t<br />i<br />n<br />g<br /><br /><br />0<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br /><br /><br />Please note that the endIndex is not inclusive. This means that the last character will be of the index endIndex-1. Therefore, in this example, every character from index 3 to index 6, inclusive, was copied into the substring.<br /><br /><br /><br />It is easy to mistake the method substring() for subString() (which does not exist and would return with a syntax error on compilation). Substring is considered to be one word. This is why the method name does not seem to follow the common syntax of Java. Just remember that this style only applies to methods or other elements that are made up of more than one word.