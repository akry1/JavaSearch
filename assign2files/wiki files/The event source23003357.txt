This is where things get interesting: the event source class. This is the interesting place because this is where we must put code to read the number stream, code to send events to all the listeners and code to manage listeners (add and remove them and keep track of them).<br />Let's start by thinking about keeping track of listeners. Normally this is a tricky business, since you have to take all sorts of multithreading concerns into account. But we're being simple in this example, so let's just stick with a simple java.util.Set of listeners. Which we can initialize in the constructor:<br /><br /><br /><br />Code section 1.1: The constructor<br /><br /><br />private Set<NumberReadListener> listeners;<br />   <br />public NumberReader() {<br />    listeners = new HashSet<NumberReadListener>();<br />}<br /><br /><br /><br /><br />That choice makes it really easy to implement adding and removing of listeners:<br /><br /><br /><br />Code section 1.2: The register/deregister<br /><br /><br />public void addNumberReadListener(NumberReadListener listener) {<br />    this.listeners.add(listener);<br />}<br /><br />public void removeNumberReadListener(NumberReadListener listener) {<br />    this.listeners.remove(listener);<br />}<br /><br /><br /><br /><br />We won't actually use the remove method in this example â€” but recall that the Model says it must be present.<br />Another advantage of this simple choice is that notification of all the listeners is easy as well. We can just assume any listeners will be in the set and iterate over them. And since the notification methods are synchronous (rule of the model) we can just call them directly:<br /><br /><br /><br />Code section 1.3: The notifiers<br /><br /><br />private void notifyListenersOfEndOfStream() {<br />    for (NumberReadListener numberReadListener : listeners) {<br />        numberReadListener.numberStreamTerminated(new NumberReadEvent(this, 0D));<br />    }<br />}<br /><br />private void notifyListeners(Double d) {<br />    for (NumberReadListener numberReadListener: listeners) {<br />        numberReadListener.numberRead(new NumberReadEvent(this, d));<br />    }<br />}<br /><br /><br /><br /><br />Note that we've made some assumptions here. For starters, we've assumed that we'll get the Double value d from somewhere. Also, we've assumed that no listener will ever care about the number value in the end-of-stream notification and have passed in the fixed value 0 for that event.<br />Finally we must deal with reading the number stream. We'll use the Console class for that and just keep on reading numbers until there are no more:<br /><br /><br /><br />Code section 1.4: The main method<br /><br /><br />public void start() {<br />    Console console = System.console();<br />    if (console != null) {<br />        Double d = null;<br />        do {<br />            String readLine = console.readLine("Enter a number: ", (Object[])null);<br />            d = getDoubleValue(readLine);<br />            if (d != null) {<br />                notifyListeners(d);<br />            }<br />        } while (d != null);<br />        notifyListenersOfEndOfStream();<br />    }<br />}<br /><br /><br /><br /><br />Note how we've hooked the number-reading loop into the event handling mechanism by calling the notify methods? The entire class looks like this:<br /><br /><br /><br />Code listing 1.4: NumberReader.<br /><br /><br />package org.wikibooks.en.javaprogramming.example;<br /><br />import java.io.Console;<br />import java.util.HashSet;<br />import java.util.Set;<br /><br />public class NumberReader {<br />    private Set<NumberReadListener> listeners;<br />   <br />    public NumberReader() {<br />        listeners = new HashSet<NumberReadListener>();<br />    }<br />   <br />    public void addNumberReadListener(NumberReadListener listener) {<br />        this.listeners.add(listener);<br />    }<br />   <br />    public void removeNumberReadListener(NumberReadListener listener) {<br />        this.listeners.remove(listener);<br />    }<br />   <br />    public void start() {<br />        Console console = System.console();<br />        if (console != null) {<br />            Double d = null;<br />            do {<br />                String readLine = console.readLine("Enter a number: ", (Object[])null);<br />                d = getDoubleValue(readLine);<br />                if (d != null) {<br />                    notifyListeners(d);<br />                }<br />            } while (d != null);<br />            notifyListenersOfEndOfStream();<br />        }<br />    }<br /><br />    private void notifyListenersOfEndOfStream() {<br />        for (NumberReadListener numberReadListener: listeners) {<br />            numberReadListener.numberStreamTerminated(new NumberReadEvent(this, 0D));<br />        }<br />    }<br /><br />    private void notifyListeners(Double d) {<br />        for (NumberReadListener numberReadListener: listeners) {<br />            numberReadListener.numberRead(new NumberReadEvent(this, d));<br />        }<br />    }<br /><br />    private Double getDoubleValue(String readLine) {<br />        Double result;<br />        try {<br />            result = Double.valueOf(readLine);<br />        } catch (Exception e) {<br />            result = null;<br />        }<br />        return result;<br />    }<br />}