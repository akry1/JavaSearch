The foreach statement allows you to iterate through all the items in a collection, examining each item in turn while still preserving its type. The syntax for the foreach statement is:<br /><br />for (type item : collection) statement;<br /><br />For an example, we'll take an array of Strings denoting days in a week and traverse through the collection, examining one item at a time.<br /><br /><br /><br /><br /><br /><br />Code section 3.18: A foreach loop.<br /><br /><br />1 String[] days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};<br />2 <br />3 for (String day : days) {<br />4   System.out.println(day);<br />5 }<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Output for code listing 3.18<br /><br />Monday<br />Tuesday<br />Wednesday<br />Thursday<br />Friday<br />Saturday<br />Sunday<br /><br /><br /><br /><br /><br /><br />Notice that the loop automatically exits after the last item in the collection has been examined in the statement block.<br />Although the enhanced for loop can make code much clearer, it can't be used in some common situations.<br /><br />Only access. Elements can not be assigned to, eg, not to increment each element in a collection.<br />Only single structure. It's not possible to traverse two structures at once, eg, to compare two arrays.<br />Only single element. Use only for single element access, eg, not to compare successive elements.<br />Only forward. It's possible to iterate only forward by single steps.<br />At least Java 5. Don't use it if you need compatibility with versions before Java 5.