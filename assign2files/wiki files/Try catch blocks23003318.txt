See also Throwing and Catching Exceptions.<br /><br />The try-catch blocks are used to catch any exceptions or other throwable objects within the code.<br />Here's what try-catch blocks looks like:<br /><br /><br />try {<br /><br />statement1.1<br />statement1.2<br />...<br />statement1.n<br /><br />} catch (exception1) {<br /><br />statement2.1<br />...<br />statement2.n<br /><br />}<br /><br /><br /><br />The code listing 3.6 tries to print all the arguments that have been passed to the program. However, if there not enough arguments, it will throw an exception.<br /><br /><br /><br />Code listing 3.6: Attempt.java<br /><br /><br /> 1 public class Attempt {<br /> 2   public static void main(String[] args) {<br /> 3     try {<br /> 4       System.out.println(args[0]);<br /> 5       System.out.println(args[1]);<br /> 6       System.out.println(args[2]);<br /> 7       System.out.println(args[3]);<br /> 8     } catch (ArrayIndexOutOfBoundsException e) {<br /> 9       System.out.println("No enough arguments");<br />10     }<br />11   }<br />12 }<br /><br /><br /><br /><br />In addition to the try and catch blocks, a finally block may be present. The finally block is always executed, even if an exception is thrown. It may appear with or without a catch block, but always with a try block.<br />Here is what a finally block looks like:<br /><br /><br />try {<br /><br />statement1.1<br />statement1.2<br />...<br />statement1.n<br /><br />} catch (exception1) {<br /><br />statement2.1<br />...<br />statement2.n<br /><br />} finally {<br /><br />statement3.1<br />...<br />statement3.n<br /><br />}