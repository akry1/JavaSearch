Actually, there are no two-dimensional arrays in Java. However, an array can contain any class of object, including an array:<br /><br /><br /><br />Code section 3.56: Two-dimensional arrays.<br /><br /><br />1 String[][] twoDimArray = {{"a", "b", "c", "d", "e"},<br />2                           {"f", "g", "h", "i", "j"},<br />3                           {"k", "l", "m", "n", "o"}};<br />4 <br />5 int[][] twoDimIntArray = {{ 0,  1,  2,  3,  4},<br />6                           {10, 11, 12, 13, 14},<br />7                           {20, 21, 22, 23, 24}};<br /><br /><br /><br /><br />It's not exactly equivalent to two-dimensional arrays because the size of the sub-arrays may vary. The sub-array reference can even be null. Consider:<br /><br /><br /><br />Code section 3.57: Weird two-dimensional array.<br /><br /><br />1 String[][] weirdTwoDimArray = {{"10", "11", "12"},<br />2                                null,<br />3                                {"20", "21", "22", "23", "24"}};<br /><br /><br /><br /><br />Note that the length of a two-dimensional array is the number of one-dimensional arrays it contains. In the above example, weirdTwoDimArray.length is 3, whereas weirdTwoDimArray[2].length is 5.<br />In the code section 3.58, we defined an array that has three elements, each element contains an array having 5 elements. We could create the array having the 5 elements first and use that one in the initialize block.<br /><br /><br /><br />Code section 3.58: Included array.<br /><br /><br />1 String[] oneDimArray = {"00", "01", "02", "03", "04"};<br />2 String[][] twoDimArray = {oneDimArray,<br />3                           {"10", "11", "12", "13", "14"},<br />4                           {"20", "21", "22", "23", "24"}};<br /><br /><br /><br /><br /><br />Test your knowledge<br /><br />Question 3.21: Consider the following code:<br /><br /><br /><br />Question 3.21: The alphabet.<br /><br /><br />1 String[][] alphabet = {{"a", "b", "c", "d", "e"},<br />2                           {"f", "g", "h", "i", "j"},<br />3                           {"k", "l", "m", "n", "o"},<br />4                           {"p", "q", "r", "s", "t"},<br />5                           {"u", "v", "w", "x", "y"},<br />6                           {"z"}};<br /><br /><br /><br /><br />Print the whole alphabet in the standard output.<br /><br />Answer<br /><br /><br /><br /><br />Question 3.21: Answer21.java<br /><br /><br /> 1 public class Answer21 {<br /> 2   public static void main(String[] args) {<br /> 3     String[][] alphabet = {{"a", "b", "c", "d", "e"},<br /> 4                           {"f", "g", "h", "i", "j"},<br /> 5                           {"k", "l", "m", "n", "o"},<br /> 6                           {"p", "q", "r", "s", "t"},<br /> 7                           {"u", "v", "w", "x", "y"},<br /> 8                           {"z"}};<br /> 9 <br />10     for (int i = 0; i < alphabet.length; i++) {<br />11       for (int j = 0; j < alphabet[i].length; j++) {<br />12         System.out.println(alphabet[i][j]);<br />13       }<br />14     }<br />15   }<br />16 }<br /><br /><br /><br /><br />i will be the indexes of the main array and j will be the indexes of all the sub-arrays. We have to first iterate on the main array. We have to read the size of the array. Then we iterate on each sub-array. We have to read the size of each array as it may vary. Doing so, we iterate on all the sub-array items using the indexes. All the items will be read in the right order.