Remember that String objects are immutable objects. Once a String is created, it can not be modified, takes up memory until garbage collected. Be careful of writing a method like this:<br /><br /><br /><br />Code section 3.87: Raw concatenation.<br /><br /><br />1 public String convertToString(Collection<String> words) {<br />2   String str = "";<br />3   // Loops through every element in words collection<br />4   for (String word : words) {<br />5     str = str + word + " ";<br />6   }<br />7   return str;<br />8 }<br /><br /><br /><br /><br />On the + operation a new String object is created at each iteration. Suppose words contains the elements ["Foo", "Bar", "Bam", "Baz"]. At runtime, the method creates thirteen Strings:<br /><br />""<br />"Foo"<br />" "<br />"Foo "<br />"Foo Bar"<br />" "<br />"Foo Bar "<br />"Foo Bar Bam"<br />" "<br />"Foo Bar Bam "<br />"Foo Bar Bam Baz"<br />" "<br />"Foo Bar Bam Baz "<br /><br />Even though only the last one is actually useful.<br />To avoid unnecessary memory use like this, use the StringBuilder class. It provides similar functionality to Strings, but stores its data in a mutable way. Only one StringBuilder object is created. Also because object creation is time consuming, using StringBuilder produces much faster code.<br /><br /><br /><br />Code section 3.88: Concatenation with StringBuilder.<br /><br /><br />1 public String convertToString(Collection<String> words) {<br />2   StringBuilder buf = new StringBuilder();<br />3   // Loops through every element in words collection<br />4   for (String word : words) {<br />5     buf.append(word);<br />6     buf.append(" ");<br />7   }<br />8   return buf.toString();<br />9 }<br /><br /><br /><br /><br />As StringBuilder isn't thread safe (see the chapter on Concurrency). You can't use it in more than one thread. For multi-thread environment, use StringBuffer instead, which does the same and is thread safe. However, as StringBuffer is slower, so only use it when it is required. Moreover, only StringBuffer existed before Java 5.