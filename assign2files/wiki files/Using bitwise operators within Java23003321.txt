Java has besides arithmetic operators a set of bit operators to manipulate the bits in a number, and a set of logical operators. The bitwise logical operators are<br /><br /><br />Operator<br />Function<br />Value of<br />x before<br />Example<br />input<br />Example<br />output<br />Value of<br />x after<br /><br /><br />&<br />Bitwise AND<br />7<br />x&27<br />3<br />7<br /><br /><br />|<br />Bitwise OR<br />7<br />x|27<br />31<br />7<br /><br /><br />^<br />Bitwise XOR<br />7<br />x^27<br />28<br />7<br /><br /><br />~<br />Bitwise inversion<br />7<br />~x<br />-8<br />7<br /><br /><br />Besides these logical bitwise functions, there are also operators to assign numbers to variables (x = -5):<br /><br /><br />Operator<br />Function<br />Example<br />input<br />Example output<br /><br /><br />&=<br />Assign x bitwisely ANDed with another value to itself<br />x &= 3<br />3<br /><br /><br />|=<br />Assign x bitwisely ORed with another value to itself<br />x |= 3<br />-5<br /><br /><br />^=<br />Assign x bitwisely XORed with another value to itself<br />x ^= 3<br />-8<br /><br /><br /><<=<br />Assign x divided by another integer to itself<br />x <<= 1<br />-10<br /><br /><br />>>=<br />Assign x bitwisely negated with another value to itself<br />x >>= 1<br />-3<br /><br /><br />>>>=<br />Assign x bitwisely negated with another value to itself<br />x >>>= 1<br />2,305,843,009,213,693,949 (64 bit)<br /><br /><br />The shift operators are used to shift the bits to the left or right, which is also a quick way to multiply/divide by two:<br /><br /><br />Operator<br />Function<br />Value of<br />x before<br />Example<br />input<br />Example output<br />Value of<br />x after<br /><br /><br /><<<br />Logical shift left<br />-15<br />x << 2<br />-60<br />-15<br /><br /><br />>><br />Arithmetic shift right<br />-15<br />x >> 3<br />-2<br />-15<br /><br /><br />>>><br />Logical shift right<br />-15<br />x >>> 3<br />2,305,843,009,213,693,937 (64 bit)<br />-15<br /><br /><br /><br /><br /><br /> Primitive Types<br />Java Programming<br />Arithmetic expressions<br />Literals