Instead of overloading, you can use dynamic number of arguments. After the last parameter, you can pass optional unlimited parameters of the same type. These parameters are defined by adding a last parameter and adding ... after its type. The dynamic arguments will be received as an array:<br /><br /><br /><br />Code section 4.27: Variable argument.<br /><br /><br /> 1   public void registrerPersonInAgenda(String firstName, String lastName, Date... meeting) {<br /> 2     String[] person = {firstName, lastName};<br /> 3     lastPosition = lastPosition + 1;<br /> 4     contactArray[lastPosition] = person;<br /> 5 <br /> 6     if (meeting.length > 0) {<br /> 7       Date[] temporaryMeetings = registreredMeetings.length + meeting.length;<br /> 8       for (i = 0; i < registreredMeetings.length; i++) {<br /> 9         temporaryMeetings[i] = registreredMeetings[i];<br />10       }<br />11       for (i = 0; i < meeting.length; i++) {<br />12         temporaryMeetings[registreredMeetings.length + i] = meeting[i];<br />13       }<br />14       registreredMeetings = temporaryMeetings;<br />15     }<br />16   }<br /><br /><br /><br /><br />The above method can be called with a dynamic number of arguments, for example:<br /><br /><br /><br />Code section 4.27: Constructor calls.<br /><br /><br />1 registrerPersonInAgenda("John", "Doe");<br />2 registrerPersonInAgenda("Mark", "Lee", new Date(), new Date());<br /><br /><br /><br /><br />This feature was not available before Java 1.5 .