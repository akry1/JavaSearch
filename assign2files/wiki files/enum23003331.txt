/** Grades of courses */<br />  enum Grade { A, B, C, D, F };<br />  // ...<br />  private Grade gradeA = Grade.A;<br /><br /><br /><br /><br /><br />This enumeration constant then can be passed in to methods:<br /><br /><br /><br /><br /><br /><br />student.assignGrade(gradeA);<br />  /**<br />   * Assigns the grade for this course to the student<br />   * @param GRADE  Grade to be assigned<br />   */<br />  public void assignGrade(final Grade GRADE) {<br />    grade = GRADE;<br />  }<br /><br /><br /><br /><br /><br />An enumeration may also have parameters:<br /><br /><br /><br /><br /><br /><br />public enum DayOfWeek {<br />  /** Enumeration constants */<br />  MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(0);<br /><br />  /** Code for the days of the week */<br />  private byte dayCode = 0;<br /><br />  /**<br />   * Private constructor<br />   * @param VALUE  Value that stands for a day of the week.<br />   */<br />  private DayOfWeek(final byte VALUE) {<br />    dayCode = java.lang.Math.abs(VALUE%7);<br />  }<br /> <br />  /**<br />   * Gets the day code<br />   * @return  The day code<br />   */<br />  public byte getDayCode() {<br />    return dayCode;<br />  }<br />}<br /><br /><br /><br /><br /><br />It is also possible to let an enumeration implement interfaces other than java.lang.Comparable and java.io.Serializable, which are already implicitly implemented by each enumeration:<br /><br /><br /><br /><br /><br /><br />public enum DayOfWeek implements Runnable {<br />  MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;<br /> <br />  /**<br />   * Run method prints all elements<br />   */<br />  public void run() {<br />    System.out.println("name() = " + name() +<br />      ", toString() = \"" + toString() + "\"");<br />  }<br />}