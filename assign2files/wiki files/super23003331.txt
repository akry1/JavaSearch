super is a keyword.<br /><br />It is used inside a sub-class method definition to call a method defined in the super class. Private methods of the super-class cannot be called. Only public and protected methods can be called by the super keyword.<br />It is also used by class constructors to invoke constructors of its parent class.<br /><br />Syntax:<br /><br />super.<method-name>();<br /><br />For example:<br /><br /><br /><br />Code listing 1: SuperClass.java<br /><br /><br />1 public class SuperClass {<br />2    public void printHello() {<br />3       System.out.println("Hello from SuperClass");<br />4       return;<br />5    }<br />6 }<br /><br /><br /><br /><br /><br /><br /><br />Code listing 2: SubClass.java<br /><br /><br /> 1 public class SubClass extends SuperClass {<br /> 2    public void printHello() {<br /> 3       super.printHello();<br /> 4       System.out.println("Hello from SubClass");<br /> 5       return;<br /> 6    }<br /> 7    public static main(String[] args) {<br /> 8       SubClass obj = new SubClass();<br /> 9       obj.printHello();<br />10    }<br />11 }<br /><br /><br /><br /><br />Running the above program:<br /><br /><br /><br />Command for Code listing 2<br /><br />$Java SubClass<br /><br /><br /><br /><br /><br /><br />Output of Code listing 2<br /><br />Hello from SuperClass<br />Hello from SubClass<br /><br /><br /><br />In Java 1.5 and later, the "super" keyword is also used to specify a lower bound on a wildcard type parameter in Generics.<br /><br /><br /><br />Code section 1: A lower bound on a wildcard type parameter.<br /><br /><br />1 public void sort(Comparator<? super T> comp) {<br />2   ...<br />3 }<br /><br /><br /><br /><br />See also:<br /><br />extends